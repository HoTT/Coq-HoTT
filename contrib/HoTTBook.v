(** The HoTT Book formalization. *)

(** This file links the results of the HoTT Book with their formalizations
    in the HoTT library. You can lookup definitions and theorems by their
    number in the HoTT Book.

    IMPORTANT NOTE FOR THE HoTT DEVELOPERS:

    This files is processed automagically by the etc/Book.py script. The
    script parses the file according to the markers present in it (the
    comment lines with many = signs followed by a LaTeX label). It
    reorders the entries according to page numbers and it inserts
    missing entries. You must therefore obey the following rules:

    1. Do not mess with the markers. If a LaTeX label has been renamed
       you may rename the corresponding marker.

    3. If a theorem is gone, you may delete the corresponding entry,
       but make sure first that it was not just moved elsewhere.

    4. Strive to make entries as self-sufficient as possible. Entries may
       get reordered or deleted.

    5. If you need to import anything, do it before the first entry.

    6. Each entry should define Book_X_Y_Z, but you can also
       put in auxiliary definitions and lemmas (keep it short please).
       The script renames the Book_X_Y_Z to whatever the correct number
       is, so initilly you can use whatever number you like.

       If you are formalizing a Lemma with several part, use
       Book_X_Y_Z_item_i, Book_X_Y_Z_item_ii, or some such.

    7. If there is a corresponding HoTT library theorem or definition,
       please use that one, even if it is not exactly the same.
*)

Require Import HoTT.

(* ================================================== lem:opp *)
(* Lemma 2.1.2, page 46 *)

Definition Book_2_1_2 := @HoTT.Overture.symmetry.

(* ================================================== lem:concat *)
(* Lemma 2.1.3, page 46 *)

Definition Book_2_1_3 := @HoTT.Overture.concat.

(* ================================================== thm:omg *)
(* Lemma 2.1.5, page 48 *)

Definition Book_2_1_5_item_i := @HoTT.PathGroupoids.concat_p1.
Definition Book_2_1_5_item_i' := @HoTT.PathGroupoids.concat_1p.
Definition Book_2_1_5_item_ii := @HoTT.PathGroupoids.concat_Vp.
Definition Book_2_1_5_item_ii' := @HoTT.PathGroupoids.concat_pV.
Definition Book_2_1_5_item_iii := @HoTT.PathGroupoids.inv_V.
Definition Book_2_1_5_item_iv := @HoTT.PathGroupoids.concat_p_pp.

(* ================================================== def:pointedtype *)
(* Definition 2.1.7, page 51 *)

(* A pointed type is also called inahbited. *)

(* XXX We should move this to HoTT. *)
Structure PointedType := {
  carrier :> Type ;
  point : carrier
}.

Definition Book_2_1_7 := PointedType.

(* ================================================== def:loopspace *)
(* Definition 2.1.8, page 51 *)



(* ================================================== ua:idtoeqv *)
(* Corollary 8.2.4, page 51 *)



(* ================================================== lem:map *)
(* Lemma 2.2.1, page 52 *)



(* ================================================== lem:ap-functor *)
(* Lemma 2.2.2, page 52 *)



(* ================================================== lem:transport *)
(* Lemma 2.2.3, page 53 *)



(* ================================================== thm:path-lifting *)
(* Lemma 2.2.4, page 53 *)



(* ================================================== lem:mapdep *)
(* Lemma 2.2.5, page 54 *)



(* ================================================== fe:thm *)
(* Theorem 8.4.2, page 54 *)



(* ================================================== thm:trans-trivial *)
(* Lemma 2.2.6, page 55 *)



(* ================================================== thm:apd-const *)
(* Lemma 2.2.9, page 55 *)



(* ================================================== thm:transport-concat *)
(* Lemma 2.2.10, page 56 *)



(* ================================================== thm:transport-compose *)
(* Lemma 2.2.11, page 56 *)



(* ================================================== thm:ap-transport *)
(* Lemma 2.2.12, page 56 *)



(* ================================================== fe:lem-delta-equiv *)
(* Lemma 8.4.10, page 56 *)



(* ================================================== lem:homotopy-props *)
(* Lemma 2.4.2, page 57 *)



(* ================================================== lem:htpy-natural *)
(* Lemma 2.4.4, page 57 *)



(* ================================================== fe:lem-main1 *)
(* Lemma 8.5.1, page 57 *)



(* ================================================== cor:hom-fg *)
(* Corollary 2.4.5, page 58 *)



(* ================================================== thm:transportequiv *)
(* Example 2.4.10, page 59 *)



(* ================================================== eg:idequiv *)
(* Example 2.4.8, page 59 *)



(* ================================================== eg:concatequiv *)
(* Example 2.4.9, page 59 *)



(* ================================================== fe:lem-main2 *)
(* Lemma 8.6.5, page 59 *)



(* ================================================== thm:equiv-eqrel *)
(* Lemma 2.4.12, page 60 *)



(* ================================================== fe:lem-projs *)
(* Lemma 8.6.6, page 60 *)



(* ================================================== thm:path-prod *)
(* Theorem 2.5.4, page 61 *)



(* ================================================== thm:trans-prod *)
(* Theorem 2.5.6, page 63 *)



(* ================================================== thm:ap-prod *)
(* Theorem 2.5.7, page 64 *)



(* ================================================== thm:eta-sigma *)
(* Corollary 2.5.10, page 65 *)



(* ================================================== thm:path-sigma *)
(* Theorem 2.5.9, page 65 *)



(* ================================================== thm:path-unit *)
(* Theorem 2.5.12, page 66 *)



(* ================================================== thm:dpath-arrow *)
(* Lemma 2.5.18, page 68 *)



(* ================================================== thm:dpath-forall *)
(* Lemma 2.5.19, page 69 *)



(* ================================================== thm:transport-is-ap *)
(* Lemma 2.5.24, page 71 *)



(* ================================================== thm:paths-respects-equiv *)
(* Theorem 2.5.25, page 71 *)



(* ================================================== cor:transport-path-prepost *)
(* Lemma 2.5.26, page 72 *)



(* ================================================== thm:transport-path *)
(* Theorem 2.5.27, page 72 *)



(* ================================================== thm:transport-path2 *)
(* Theorem 2.5.28, page 72 *)



(* ================================================== thm:dpath-path *)
(* Theorem 2.5.29, page 73 *)



(* ================================================== thm:path-coprod *)
(* Theorem 2.5.34, page 74 *)



(* ================================================== thm:path-nat *)
(* Theorem 2.5.36, page 76 *)



(* ================================================== thm:prod-ump *)
(* Theorem 2.6.2, page 78 *)



(* ================================================== thm:prod-umpd *)
(* Theorem 2.6.5, page 78 *)



(* ================================================== thm:ttac *)
(* Theorem 2.6.7, page 79 *)



(* ================================================== defn:set *)
(* Definition 2.7.1, page 80 *)



(* ================================================== thm:nat-set *)
(* Example 2.7.4, page 81 *)



(* ================================================== thm:isset-prod *)
(* Example 2.7.5, page 81 *)



(* ================================================== thm:isset-forall *)
(* Example 2.7.6, page 81 *)



(* ================================================== defn:1type *)
(* Definition 2.7.7, page 81 *)



(* ================================================== thm:isset-is1type *)
(* Lemma 2.7.8, page 81 *)



(* ================================================== thm:type-is-not-a-set *)
(* Example 2.7.9, page 82 *)



(* ================================================== thm:not-dneg *)
(* Theorem 2.8.2, page 83 *)



(* ================================================== thm:not-lem *)
(* Corollary 2.8.7, page 84 *)



(* ================================================== lem:equiv-iff-hprop *)
(* Lemma 2.8.10, page 85 *)



(* ================================================== thm:inhabprop-eqvunit *)
(* Lemma 2.8.9, page 85 *)



(* ================================================== thm:isprop-isset *)
(* Lemma 2.8.12, page 86 *)



(* ================================================== thm:isprop-isprop *)
(* Lemma 2.8.12, page 86 *)



(* ================================================== thm:path-subset *)
(* Lemma 2.8.15, page 88 *)



(* ================================================== thm:isprop-forall *)
(* Example 2.8.19, page 89 *)



(* ================================================== thm:ac-epis-split *)
(* Lemma 2.8.21, page 91 *)



(* ================================================== thm:no-higher-ac *)
(* Lemma 2.8.24, page 92 *)



(* ================================================== cor:UC *)
(* Corollary 2.8.26, page 93 *)



(* ================================================== defn:contractible *)
(* Definition 2.9.1, page 97 *)



(* ================================================== thm:contr-unit *)
(* Lemma 2.9.3, page 97 *)



(* ================================================== thm:isprop-iscontr *)
(* Lemma 2.9.4, page 97 *)



(* ================================================== thm:contr-contr *)
(* Corollary 2.9.5, page 98 *)



(* ================================================== thm:contr-forall *)
(* Lemma 2.9.6, page 98 *)



(* ================================================== thm:contr-paths *)
(* Lemma 2.9.7, page 98 *)



(* ================================================== thm:omit-contr *)
(* Lemma 2.9.8, page 98 *)



(* ================================================== thm:prop-minusonetype *)
(* Lemma 2.9.9, page 99 *)



(* ================================================== ex:basics:concat *)
(* Exercise 2.1, page 101 *)



(* ================================================== ex:isset-coprod *)
(* Exercise 2.10, page 101 *)



(* ================================================== ex:isset-sigma *)
(* Exercise 2.11, page 101 *)



(* ================================================== ex:equiv-concat *)
(* Exercise 2.5, page 101 *)



(* ================================================== ex:ap-sigma *)
(* Exercise 2.6, page 101 *)



(* ================================================== ex:coprod-ump *)
(* Exercise 2.8, page 101 *)



(* ================================================== ex:neg-ldn *)
(* Exercise 2.12, page 102 *)



(* ================================================== ex:eqvboolbool *)
(* Exercise 2.13, page 102 *)



(* ================================================== ex:prop-endocontr *)
(* Exercise 2.14, page 102 *)



(* ================================================== ex:disjoint-or *)
(* Exercise 2.16, page 102 *)



(* ================================================== ex:brck-qinv *)
(* Exercise 2.17, page 102 *)



(* ================================================== ex:lem-impred *)
(* Exercise 2.19, page 102 *)



(* ================================================== ex:lem-brck *)
(* Exercise 2.23, page 102 *)



(* ================================================== ex:impred-brck *)
(* Exercise 2.24, page 102 *)



(* ================================================== ex:prop-trunc-ind *)
(* Exercise 2.26, page 103 *)



(* ================================================== ex:lem-ldn *)
(* Exercise 2.27, page 103 *)



(* ================================================== ex:omit-contr2 *)
(* Exercise 2.28, page 103 *)



(* ================================================== lem:qinv-autohtpy *)
(* Lemma 3.1.1, page 105 *)



(* ================================================== lem:autohtpy *)
(* Lemma 3.1.2, page 105 *)



(* ================================================== lem:coh-equiv *)
(* Lemma 3.2.2, page 107 *)



(* ================================================== thm:equiv-iso-adj *)
(* Theorem 3.2.3, page 108 *)



(* ================================================== lem:hfib *)
(* Lemma 3.2.5, page 109 *)



(* ================================================== thm:contr-hae *)
(* Theorem 3.2.6, page 109 *)



(* ================================================== lem:coh-hfib *)
(* Lemma 3.2.11, page 110 *)



(* ================================================== thm:equiv-compose-equiv *)
(* Lemma 3.2.8, page 110 *)



(* ================================================== lem:inv-hprop *)
(* Lemma 3.2.9, page 110 *)



(* ================================================== lem:coh-hprop *)
(* Lemma 3.2.12, page 111 *)



(* ================================================== thm:hae-hprop *)
(* Theorem 3.2.13, page 111 *)



(* ================================================== thm:isprop-biinv *)
(* Theorem 3.3.2, page 111 *)



(* ================================================== thm:equiv-biinv-isequiv *)
(* Corollary 3.3.3, page 112 *)



(* ================================================== defn:equivalence *)
(* Definition 3.4.1, page 112 *)



(* ================================================== thm:lequiv-contr-hae *)
(* Theorem 3.4.4, page 112 *)



(* ================================================== thm:contr-hprop *)
(* Lemma 3.4.5, page 113 *)



(* ================================================== thm:equiv-contr-hae *)
(* Theorem 3.4.6, page 113 *)



(* ================================================== thm:equiv-inhabcod *)
(* Corollary 3.4.7, page 113 *)



(* ================================================== thm:mono-surj-equiv *)
(* Theorem 3.5.3, page 114 *)



(* ================================================== thm:nat-uniq *)
(* Theorem 4.1.1, page 118 *)



(* ================================================== thm:w-uniq *)
(* Theorem 4.4.1, page 125 *)



(* ================================================== thm:w-hinit *)
(* Theorem 4.4.5, page 126 *)



(* ================================================== thm:S1rec *)
(* Lemma 5.2.3, page 135 *)



(* ================================================== thm:S1ump *)
(* Lemma 5.2.7, page 137 *)



(* ================================================== thm:interval-funext *)
(* Lemma 5.3.2, page 138 *)



(* ================================================== thm:S1-autohtpy *)
(* Lemma 5.4.2, page 140 *)



(* ================================================== thm:ap2 *)
(* Lemma 5.4.4, page 140 *)



(* ================================================== thm:transport2 *)
(* Lemma 5.4.5, page 141 *)



(* ================================================== thm:apd2 *)
(* Lemma 5.4.6, page 141 *)



(* ================================================== thm:suspbool *)
(* Lemma 5.5.1, page 142 *)



(* ================================================== lem:susp-loop-adj *)
(* Lemma 5.5.4, page 144 *)



(* ================================================== thm:pushout-ump *)
(* Lemma 5.8.2, page 151 *)



(* ================================================== thm:trunc0-ind *)
(* Lemma 5.9.1, page 154 *)



(* ================================================== thm:trunc0-lump *)
(* Lemma 5.9.2, page 154 *)



(* ================================================== thm:transport-is-given *)
(* Lemma 5.11.1, page 157 *)



(* ================================================== thm:flattening *)
(* Lemma 5.11.2, page 158 *)



(* ================================================== thm:flattening-rect *)
(* Lemma 5.11.4, page 159 *)



(* ================================================== thm:flattening-rectnd *)
(* Lemma 5.11.5, page 160 *)



(* ================================================== thm:ap-sigma-rect-path-pair *)
(* Lemma 5.11.7, page 160 *)



(* ================================================== thm:flattening-rectnd-beta-ppt *)
(* Lemma 5.11.8, page 161 *)



(* ================================================== ex:torus *)
(* Exercise 5.1, page 163 *)



(* ================================================== ex:suspS1 *)
(* Exercise 5.2, page 163 *)



(* ================================================== ex:nspheres *)
(* Exercise 5.3, page 163 *)



(* ================================================== def:hlevel *)
(* Definition 6.1.1, page 164 *)



(* ================================================== thm:h-level-retracts *)
(* Theorem 6.1.4, page 165 *)



(* ================================================== cor:preservation-hlevels-weq *)
(* Corollary 6.1.5, page 165 *)



(* ================================================== thm:isntype-mono *)
(* Theorem 6.1.6, page 165 *)



(* ================================================== thm:hlevel-cumulative *)
(* Theorem 6.1.7, page 166 *)



(* ================================================== thm:hlevel-prod *)
(* Theorem 6.1.9, page 166 *)



(* ================================================== thm:isaprop-isofhlevel *)
(* Theorem 6.1.10, page 167 *)



(* ================================================== thm:hleveln-of-hlevelSn *)
(* Theorem 6.1.11, page 167 *)



(* ================================================== thm:h-set-uip-K *)
(* Theorem 6.2.1, page 168 *)



(* ================================================== defn:decidable-equality *)
(* Definition 6.2.2, page 168 *)



(* ================================================== thm:hedberg *)
(* Theorem 6.2.3, page 168 *)



(* ================================================== prop:nat-is-set *)
(* Theorem 6.2.5, page 169 *)



(* ================================================== thm:hlevel-loops *)
(* Theorem 6.2.6, page 169 *)



(* ================================================== lem:hlevel-if-inhab-hlevel *)
(* Lemma 6.2.7, page 170 *)



(* ================================================== thm:ntype-nloop *)
(* Theorem 6.2.8, page 170 *)



(* ================================================== thm:truncn-ind *)
(* Theorem 6.3.2, page 171 *)



(* ================================================== reflectPequiv *)
(* Lemma 6.4.5, page 176 *)



(* ================================================== coneispb *)
(* Lemma 6.7.7, page 182 *)



(* ================================================== reflectcommutespushout *)
(* Lemma 6.8.3, page 184 *)



(* ================================================== lem:transport-s1-code *)
(* Lemma 7.2.2, page 201 *)



(* ================================================== lem:s1-decode-encode *)
(* Lemma 7.2.6, page 203 *)



(* ================================================== lem:s1-encode-decode *)
(* Lemma 7.2.7, page 203 *)



(* ================================================== cor:omega-s1 *)
(* Corollary 7.2.9, page 204 *)



(* ================================================== connectedtotruncated *)
(* Lemma 7.3.2, page 205 *)



(* ================================================== cor:sn-connected *)
(* Corollary 7.3.4, page 207 *)



(* ================================================== lem:pik-nconnected *)
(* Lemma 7.4.3, page 207 *)



(* ================================================== eg:circle *)
(* Example 7.5.6, page 212 *)



(* ================================================== eg:suspension *)
(* Example 7.5.7, page 213 *)



(* ================================================== eg:wedge *)
(* Example 7.5.8, page 213 *)



(* ================================================== thm:kbar *)
(* Lemma 7.5.9, page 214 *)



(* ================================================== eg:clvk *)
(* Example 7.5.12, page 216 *)



(* ================================================== eg:cofiber *)
(* Example 7.5.13, page 216 *)



(* ================================================== eg:torus *)
(* Example 7.5.14, page 216 *)



(* ================================================== eg:kg1 *)
(* Example 7.5.16, page 217 *)



(* ================================================== thm:whitehead0 *)
(* Theorem 7.6.1, page 218 *)



(* ================================================== thm:whitehead1 *)
(* Corollary 7.6.2, page 218 *)



(* ================================================== thm:whiteheadn *)
(* Theorem 7.6.3, page 219 *)



(* ================================================== ct:precategory *)
(* Definition 8.1.1, page 221 *)



(* ================================================== ct:isomorphism *)
(* Definition 8.1.2, page 222 *)



(* ================================================== ct:isoprop *)
(* Lemma 8.1.3, page 222 *)



(* ================================================== ct:orders *)
(* Example 8.1.14, page 223 *)



(* ================================================== ct:precatset *)
(* Example 8.1.5, page 223 *)



(* ================================================== ct:category *)
(* Definition 8.1.6, page 223 *)



(* ================================================== ct:eg:set *)
(* Example 8.1.7, page 223 *)



(* ================================================== ct:obj-1type *)
(* Lemma 8.1.8, page 223 *)



(* ================================================== ct:idtoiso-trans *)
(* Lemma 8.1.9, page 223 *)



(* ================================================== ct:gaunt *)
(* Example 8.1.15, page 224 *)



(* ================================================== ct:discrete *)
(* Example 8.1.16, page 224 *)



(* ================================================== ct:fundgpd *)
(* Example 8.1.17, page 224 *)



(* ================================================== ct:hoprecat *)
(* Example 8.1.18, page 224 *)



(* ================================================== ct:rel *)
(* Example 8.1.19, page 224 *)



(* ================================================== ct:functor *)
(* Definition 8.2.1, page 225 *)



(* ================================================== ct:nattrans *)
(* Definition 8.2.2, page 226 *)



(* ================================================== ct:functor-precat *)
(* Definition 8.2.3, page 226 *)



(* ================================================== ct:natiso *)
(* Lemma 8.2.4, page 226 *)



(* ================================================== ct:functor-cat *)
(* Theorem 8.2.5, page 226 *)



(* ================================================== ct:interchange *)
(* Lemma 8.2.8, page 228 *)



(* ================================================== ct:functor-assoc *)
(* Lemma 8.2.9, page 228 *)



(* ================================================== ct:pentagon *)
(* Lemma 8.2.10, page 229 *)



(* ================================================== ct:units *)
(* Lemma 8.2.11, page 229 *)



(* ================================================== ct:adjprop *)
(* Lemma 8.3.2, page 230 *)



(* ================================================== ct:adjointification *)
(* Lemma 8.4.2, page 230 *)



(* ================================================== ct:ffeso *)
(* Lemma 8.4.5, page 231 *)



(* ================================================== ct:catweq *)
(* Lemma 8.4.7, page 232 *)



(* ================================================== ct:isocat *)
(* Definition 8.4.8, page 233 *)



(* ================================================== ct:isoprecat *)
(* Lemma 8.4.9, page 233 *)



(* ================================================== ct:chaotic *)
(* Example 8.4.13, page 235 *)



(* ================================================== ct:eqv-levelwise *)
(* Lemma 8.4.14, page 235 *)



(* ================================================== ct:cat-eq-iso *)
(* Lemma 8.4.15, page 236 *)



(* ================================================== ct:cat-2cat *)
(* Theorem 8.4.16, page 236 *)



(* ================================================== ct:functorexpadj *)
(* Lemma 8.5.3, page 237 *)



(* ================================================== ct:yoneda *)
(* Theorem 8.5.4, page 238 *)



(* ================================================== ct:adj-repr *)
(* Lemma 8.5.10, page 239 *)



(* ================================================== ct:yoneda-embedding *)
(* Corollary 8.5.6, page 239 *)



(* ================================================== ct:yoneda-mono *)
(* Corollary 8.5.7, page 239 *)



(* ================================================== ct:representable *)
(* Definition 8.5.8, page 239 *)



(* ================================================== ct:representable-prop *)
(* Theorem 8.5.9, page 239 *)



(* ================================================== ct:adjprop2 *)
(* Corollary 8.5.11, page 240 *)



(* ================================================== ct:galois *)
(* Example 8.6.3, page 241 *)



(* ================================================== ct:idtounitary *)
(* Lemma 8.7.3, page 242 *)



(* ================================================== ct:hilb *)
(* Example 8.7.7, page 242 *)



(* ================================================== ct:sig *)
(* Definition 8.8.1, page 243 *)



(* ================================================== thm:sip *)
(* Theorem 8.8.2, page 244 *)



(* ================================================== ct:sip-functor-cat *)
(* Example 8.8.3, page 244 *)



(* ================================================== defn:fo-notion-of-structure *)
(* Definition 8.8.4, page 245 *)



(* ================================================== ct:cat-weq-eq *)
(* Theorem 8.9.4, page 248 *)



(* ================================================== ct:hocat *)
(* Example 8.9.7, page 253 *)



(* ================================================== ct:pre2cat *)
(* Exercise 8.4, page 254 *)



(* ================================================== ct:2cat *)
(* Exercise 8.5, page 254 *)



(* ================================================== ct:groupoids *)
(* Exercise 8.6, page 254 *)



(* ================================================== ct:ex:hocat *)
(* Exercise 8.9, page 255 *)



(* ================================================== epis-surj *)
(* Lemma 9.1.7, page 258 *)



(* ================================================== lem:images_are_coequalizers *)
(* Lemma 9.1.8, page 260 *)



(* ================================================== lem:pb_of_coeq_is_coeq *)
(* Lemma 9.1.9, page 261 *)



(* ================================================== thm:set_regular *)
(* Theorem 9.1.10, page 262 *)



(* ================================================== lem:sets_exact *)
(* Lemma 9.1.13, page 262 *)



(* ================================================== def:VVquotient *)
(* Definition 9.1.15, page 263 *)



(* ================================================== prop:kernels_are_effective *)
(* Theorem 9.1.17, page 264 *)



(* ================================================== lem:replacement *)
(* Lemma 9.1.19, page 265 *)



(* ================================================== thm:nobject_classifier_appetizer *)
(* Theorem 9.1.20, page 266 *)



(* ================================================== thm:nobject_classifier *)
(* Theorem 9.1.22, page 267 *)



(* ================================================== lem:subobject *)
(* Lemma 9.1.23, page 267 *)



(* ================================================== prop:trunc_of_prop_is_set *)
(* Lemma 9.1.25, page 268 *)



(* ================================================== thm:1surj_to_surj_to_pem *)
(* Theorem 9.1.27, page 269 *)



(* ================================================== defn:small_maps *)
(* Definition 9.2.1, page 270 *)



(* ================================================== card:semiring *)
(* Lemma 9.7.5, page 273 *)



(* ================================================== card:exp *)
(* Lemma 9.7.7, page 274 *)



(* ================================================== thm:injsurj *)
(* Lemma 9.7.10, page 275 *)



(* ================================================== thm:wfmin *)
(* Lemma 9.8.6, page 278 *)



(* ================================================== def:simulation *)
(* Definition 9.8.9, page 278 *)



(* ================================================== thm:wfcat *)
(* Corollary 9.8.13, page 279 *)



(* ================================================== thm:ordord *)
(* Theorem 9.8.17, page 280 *)



(* ================================================== thm:ordsucc *)
(* Lemma 9.8.19, page 281 *)



(* ================================================== thm:ordunion *)
(* Lemma 9.8.20, page 281 *)



(* ================================================== thm:wellorder *)
(* Theorem 9.9.3, page 282 *)



(* ================================================== thm:wop *)
(* Theorem 9.9.4, page 283 *)



(* ================================================== lem:quotient-when-canonical-representatives *)
(* Lemma 10.1.1, page 287 *)



(* ================================================== defn:cauchy-approximation *)
(* Definition 10.2.1, page 289 *)



(* ================================================== defn:cauchy-reals *)
(* Definition 10.2.4, page 290 *)



(* ================================================== lem:RC-well-defined *)
(* Lemma 10.2.7, page 291 *)



(* ================================================== red *)
(* Theorem 10.5.1, page 300 *)



(* ================================================== SN *)
(* Theorem 10.5.2, page 300 *)



(* ================================================== normal *)
(* Lemma 10.5.3, page 301 *)



