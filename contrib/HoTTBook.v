(** The HoTT Book formalization. *)

(** This file links the results of the HoTT Book with their formalizations
    in the HoTT library. You can lookup definitions and theorems by their
    number in the HoTT Book.

    IMPORTANT NOTE FOR THE HoTT DEVELOPERS:

    This files is processed automagically by the etc/Book.py script. The
    script parses the file according to the markers present in it (the
    comment lines with many = signs followed by a LaTeX label). It
    reorders the entries according to page numbers and it inserts
    missing entries. You must therefore obey the following rules:

    1. Do not mess with the markers. If a LaTeX label has been renamed
       you may rename the corresponding marker.

    3. If a theorem is gone, you may delete the corresponding entry,
       but make sure first that it was not just moved elsewhere.

    4. Strive to make entries as self-sufficient as possible. Entries may
       get reordered or deleted.

    5. If you need to import anything, do it before the first entry.

    6. Each entry should define Book_X_Y_Z, but you can also
       put in auxiliary definitions and lemmas (keep it short please).
       The script renames the Book_X_Y_Z to whatever the correct number
       is, so initilly you can use whatever number you like.

       If you are formalizing a Lemma with several part, use
       Book_X_Y_Z_item_i, Book_X_Y_Z_item_ii, or some such.

    7. If there is a corresponding HoTT library theorem or definition,
       please use that one, even if it is not exactly the same.
*)

Require Import HoTT.

(* ================================================== lem:opp *)
(* Lemma 2.1.2, page 47 *)

Definition Book_2_1_2 := @HoTT.Overture.inverse.

(* ================================================== lem:concat *)
(* Lemma 2.1.3, page 48 *)

Definition Book_2_1_3 := @HoTT.Overture.concat.

(* ================================================== thm:omg *)
(* Lemma 2.1.5, page 49 *)

Definition Book_2_1_5_item_i := @HoTT.PathGroupoids.concat_p1.
Definition Book_2_1_5_item_i' := @HoTT.PathGroupoids.concat_1p.
Definition Book_2_1_5_item_ii := @HoTT.PathGroupoids.concat_Vp.
Definition Book_2_1_5_item_ii' := @HoTT.PathGroupoids.concat_pV.
Definition Book_2_1_5_item_iii := @HoTT.PathGroupoids.inv_V.
Definition Book_2_1_5_item_iv := @HoTT.PathGroupoids.concat_p_pp.

(* ================================================== def:pointedtype *)
(* Definition 2.1.7, page 52 *)

(* A pointed type is also called inahbited. *)

(* XXX We should move this to HoTT. *)
Structure PointedType := {
  carrier :> Type ;
  point : carrier
}.

Definition Book_2_1_7 := PointedType.

(* ================================================== def:loopspace *)
(* Definition 2.1.8, page 53 *)



(* ================================================== lem:map *)
(* Lemma 2.2.1, page 53 *)



(* ================================================== lem:ap-functor *)
(* Lemma 2.2.2, page 54 *)



(* ================================================== lem:transport *)
(* Lemma 2.2.3, page 54 *)



(* ================================================== thm:path-lifting *)
(* Lemma 2.2.4, page 55 *)



(* ================================================== lem:mapdep *)
(* Lemma 2.2.5, page 55 *)



(* ================================================== thm:trans-trivial *)
(* Lemma 2.2.6, page 56 *)



(* ================================================== thm:transport-concat *)
(* Lemma 2.2.10, page 57 *)



(* ================================================== thm:apd-const *)
(* Lemma 2.2.9, page 57 *)



(* ================================================== thm:transport-compose *)
(* Lemma 2.2.11, page 58 *)



(* ================================================== thm:ap-transport *)
(* Lemma 2.2.12, page 58 *)



(* ================================================== defn:homotopy *)
(* Definition 2.4.1, page 59 *)



(* ================================================== lem:homotopy-props *)
(* Lemma 2.4.2, page 59 *)



(* ================================================== lem:htpy-natural *)
(* Lemma 2.4.4, page 59 *)



(* ================================================== cor:hom-fg *)
(* Corollary 2.4.5, page 60 *)



(* ================================================== eg:idequiv *)
(* Example 2.4.8, page 60 *)



(* ================================================== thm:transportequiv *)
(* Example 2.4.10, page 61 *)



(* ================================================== eg:concatequiv *)
(* Example 2.4.9, page 61 *)



(* ================================================== thm:equiv-eqrel *)
(* Lemma 2.4.12, page 62 *)



(* ================================================== thm:path-prod *)
(* Theorem 2.5.4, page 63 *)



(* ================================================== thm:trans-prod *)
(* Theorem 2.5.6, page 65 *)



(* ================================================== thm:ap-prod *)
(* Theorem 2.5.7, page 66 *)



(* ================================================== thm:path-sigma *)
(* Theorem 2.5.9, page 66 *)



(* ================================================== thm:eta-sigma *)
(* Corollary 2.5.10, page 68 *)



(* ================================================== thm:path-unit *)
(* Theorem 2.5.12, page 68 *)



(* ================================================== thm:dpath-arrow *)
(* Lemma 2.5.18, page 71 *)



(* ================================================== thm:dpath-forall *)
(* Lemma 2.5.19, page 71 *)



(* ================================================== thm:transport-is-ap *)
(* Lemma 2.5.24, page 73 *)



(* ================================================== thm:paths-respects-equiv *)
(* Theorem 2.5.25, page 73 *)



(* ================================================== cor:transport-path-prepost *)
(* Lemma 2.5.26, page 74 *)



(* ================================================== thm:transport-path *)
(* Theorem 2.5.27, page 75 *)



(* ================================================== thm:transport-path2 *)
(* Theorem 2.5.28, page 75 *)



(* ================================================== thm:dpath-path *)
(* Theorem 2.5.29, page 75 *)



(* ================================================== thm:path-coprod *)
(* Theorem 2.5.34, page 77 *)



(* ================================================== thm:path-nat *)
(* Theorem 2.5.36, page 79 *)



(* ================================================== thm:prod-ump *)
(* Theorem 2.6.2, page 80 *)



(* ================================================== thm:prod-umpd *)
(* Theorem 2.6.5, page 81 *)



(* ================================================== thm:ttac *)
(* Theorem 2.6.7, page 81 *)



(* ================================================== defn:set *)
(* Definition 2.7.1, page 83 *)



(* ================================================== thm:nat-set *)
(* Example 2.7.4, page 83 *)



(* ================================================== thm:isset-prod *)
(* Example 2.7.5, page 83 *)



(* ================================================== thm:isset-forall *)
(* Example 2.7.6, page 83 *)



(* ================================================== defn:1type *)
(* Definition 2.7.7, page 84 *)



(* ================================================== thm:isset-is1type *)
(* Lemma 2.7.8, page 84 *)



(* ================================================== thm:type-is-not-a-set *)
(* Example 2.7.9, page 84 *)



(* ================================================== thm:not-dneg *)
(* Theorem 2.8.2, page 85 *)



(* ================================================== thm:not-lem *)
(* Corollary 2.8.7, page 87 *)



(* ================================================== lem:equiv-iff-hprop *)
(* Lemma 2.8.10, page 88 *)



(* ================================================== thm:prop-set *)
(* Lemma 2.8.11, page 88 *)



(* ================================================== thm:inhabprop-eqvunit *)
(* Lemma 2.8.9, page 88 *)



(* ================================================== thm:isprop-isset *)
(* Lemma 2.8.12, page 89 *)



(* ================================================== thm:isprop-isprop *)
(* Lemma 2.8.12, page 89 *)



(* ================================================== thm:path-subset *)
(* Lemma 2.8.15, page 90 *)



(* ================================================== thm:isprop-forall *)
(* Example 2.8.19, page 92 *)



(* ================================================== thm:ac-epis-split *)
(* Lemma 2.8.21, page 94 *)



(* ================================================== thm:no-higher-ac *)
(* Lemma 2.8.24, page 95 *)



(* ================================================== cor:UC *)
(* Corollary 2.8.26, page 96 *)



(* ================================================== defn:contractible *)
(* Definition 2.9.1, page 99 *)



(* ================================================== thm:contr-unit *)
(* Lemma 2.9.3, page 100 *)



(* ================================================== thm:isprop-iscontr *)
(* Lemma 2.9.4, page 100 *)



(* ================================================== thm:contr-contr *)
(* Corollary 2.9.5, page 100 *)



(* ================================================== thm:contr-forall *)
(* Lemma 2.9.6, page 100 *)



(* ================================================== thm:contr-paths *)
(* Lemma 2.9.7, page 101 *)



(* ================================================== thm:omit-contr *)
(* Lemma 2.9.8, page 101 *)



(* ================================================== thm:prop-minusonetype *)
(* Lemma 2.9.9, page 101 *)



(* ================================================== ex:basics:concat *)
(* Exercise 2.1, page 103 *)



(* ================================================== ex:isset-coprod *)
(* Exercise 2.10, page 104 *)



(* ================================================== ex:isset-sigma *)
(* Exercise 2.11, page 104 *)



(* ================================================== ex:neg-ldn *)
(* Exercise 2.12, page 104 *)



(* ================================================== ex:eqvboolbool *)
(* Exercise 2.13, page 104 *)



(* ================================================== ex:prop-endocontr *)
(* Exercise 2.14, page 104 *)



(* ================================================== ex:disjoint-or *)
(* Exercise 2.16, page 104 *)



(* ================================================== ex:brck-qinv *)
(* Exercise 2.17, page 104 *)



(* ================================================== ex:lem-impred *)
(* Exercise 2.19, page 104 *)



(* ================================================== ex:equiv-concat *)
(* Exercise 2.5, page 104 *)



(* ================================================== ex:ap-sigma *)
(* Exercise 2.6, page 104 *)



(* ================================================== ex:coprod-ump *)
(* Exercise 2.8, page 104 *)



(* ================================================== ex:lem-brck *)
(* Exercise 2.23, page 105 *)



(* ================================================== ex:impred-brck *)
(* Exercise 2.24, page 105 *)



(* ================================================== ex:prop-trunc-ind *)
(* Exercise 2.26, page 105 *)



(* ================================================== ex:lem-ldn *)
(* Exercise 2.27, page 105 *)



(* ================================================== ex:omit-contr2 *)
(* Exercise 2.28, page 105 *)



(* ================================================== lem:qinv-autohtpy *)
(* Lemma 3.1.1, page 107 *)



(* ================================================== lem:autohtpy *)
(* Lemma 3.1.2, page 107 *)



(* ================================================== lem:coh-equiv *)
(* Lemma 3.2.2, page 109 *)



(* ================================================== thm:equiv-iso-adj *)
(* Theorem 3.2.3, page 110 *)



(* ================================================== lem:hfib *)
(* Lemma 3.2.5, page 111 *)



(* ================================================== thm:contr-hae *)
(* Theorem 3.2.6, page 111 *)



(* ================================================== lem:coh-hfib *)
(* Lemma 3.2.11, page 112 *)



(* ================================================== thm:equiv-compose-equiv *)
(* Lemma 3.2.8, page 112 *)



(* ================================================== lem:inv-hprop *)
(* Lemma 3.2.9, page 112 *)



(* ================================================== lem:coh-hprop *)
(* Lemma 3.2.12, page 113 *)



(* ================================================== thm:hae-hprop *)
(* Theorem 3.2.13, page 113 *)



(* ================================================== thm:isprop-biinv *)
(* Theorem 3.3.2, page 113 *)



(* ================================================== thm:equiv-biinv-isequiv *)
(* Corollary 3.3.3, page 114 *)



(* ================================================== defn:equivalence *)
(* Definition 3.4.1, page 114 *)



(* ================================================== thm:lequiv-contr-hae *)
(* Theorem 3.4.4, page 114 *)



(* ================================================== thm:contr-hprop *)
(* Lemma 3.4.5, page 115 *)



(* ================================================== thm:equiv-contr-hae *)
(* Theorem 3.4.6, page 115 *)



(* ================================================== thm:equiv-inhabcod *)
(* Corollary 3.4.7, page 115 *)



(* ================================================== thm:mono-surj-equiv *)
(* Theorem 3.5.3, page 116 *)



(* ================================================== fibwise-fiber-total-fiber-equiv *)
(* Theorem 3.6.3, page 117 *)



(* ================================================== thm:total-fiber-equiv *)
(* Theorem 3.6.4, page 117 *)



(* ================================================== thm:nat-uniq *)
(* Theorem 4.1.1, page 121 *)



(* ================================================== thm:w-uniq *)
(* Theorem 4.4.1, page 129 *)



(* ================================================== thm:w-hinit *)
(* Theorem 4.4.5, page 129 *)



(* ================================================== ex:bool *)
(* Exercise 4.2, page 133 *)



(* ================================================== thm:S1rec *)
(* Lemma 5.2.3, page 139 *)



(* ================================================== thm:S1ump *)
(* Lemma 5.2.7, page 140 *)



(* ================================================== thm:interval-funext *)
(* Lemma 5.3.2, page 142 *)



(* ================================================== thm:loop-nontrivial *)
(* Lemma 5.4.1, page 142 *)



(* ================================================== thm:S1-autohtpy *)
(* Lemma 5.4.2, page 143 *)



(* ================================================== thm:ap2 *)
(* Lemma 5.4.4, page 143 *)



(* ================================================== thm:transport2 *)
(* Lemma 5.4.5, page 144 *)



(* ================================================== thm:apd2 *)
(* Lemma 5.4.6, page 144 *)



(* ================================================== thm:suspbool *)
(* Lemma 5.5.1, page 145 *)



(* ================================================== lem:susp-loop-adj *)
(* Lemma 5.5.4, page 147 *)



(* ================================================== thm:pushout-ump *)
(* Lemma 5.8.2, page 154 *)



(* ================================================== thm:trunc0-ind *)
(* Lemma 5.9.1, page 157 *)



(* ================================================== thm:trunc0-lump *)
(* Lemma 5.9.2, page 157 *)



(* ================================================== thm:set-pushout *)
(* Lemma 5.9.3, page 158 *)



(* ================================================== thm:quotient-surjective *)
(* Lemma 5.10.2, page 159 *)



(* ================================================== thm:quotient-ump *)
(* Lemma 5.10.3, page 159 *)



(* ================================================== def:VVquotient *)
(* Definition 5.10.5, page 160 *)



(* ================================================== lem:quotient-when-canonical-representatives *)
(* Lemma 5.10.7, page 161 *)



(* ================================================== thm:sign-induction *)
(* Lemma 5.10.9, page 162 *)



(* ================================================== thm:homotopy-groups *)
(* Example 5.11.4, page 163 *)



(* ================================================== thm:free-monoid *)
(* Lemma 5.11.5, page 164 *)



(* ================================================== thm:transport-is-given *)
(* Lemma 5.12.1, page 168 *)



(* ================================================== thm:flattening *)
(* Lemma 5.12.2, page 169 *)



(* ================================================== thm:flattening-rect *)
(* Lemma 5.12.4, page 170 *)



(* ================================================== thm:flattening-rectnd *)
(* Lemma 5.12.5, page 171 *)



(* ================================================== thm:ap-sigma-rect-path-pair *)
(* Lemma 5.12.7, page 171 *)



(* ================================================== thm:flattening-rectnd-beta-ppt *)
(* Lemma 5.12.8, page 172 *)



(* ================================================== ex:torus *)
(* Exercise 5.1, page 174 *)



(* ================================================== ex:suspS1 *)
(* Exercise 5.2, page 174 *)



(* ================================================== ex:nspheres *)
(* Exercise 5.3, page 174 *)



(* ================================================== ex:free-monoid *)
(* Exercise 5.7, page 174 *)



(* ================================================== def:hlevel *)
(* Definition 6.1.1, page 175 *)



(* ================================================== thm:h-level-retracts *)
(* Theorem 6.1.4, page 176 *)



(* ================================================== cor:preservation-hlevels-weq *)
(* Corollary 6.1.5, page 176 *)



(* ================================================== thm:isntype-mono *)
(* Theorem 6.1.6, page 176 *)



(* ================================================== thm:hlevel-cumulative *)
(* Theorem 6.1.7, page 177 *)



(* ================================================== thm:hlevel-prod *)
(* Theorem 6.1.9, page 177 *)



(* ================================================== thm:isaprop-isofhlevel *)
(* Theorem 6.1.10, page 178 *)



(* ================================================== thm:hleveln-of-hlevelSn *)
(* Theorem 6.1.11, page 178 *)



(* ================================================== thm:h-set-uip-K *)
(* Theorem 6.2.1, page 179 *)



(* ================================================== thm:h-set-refrel-in-paths-sets *)
(* Theorem 6.2.2, page 179 *)



(* ================================================== notnotstable-equality-to-set *)
(* Corollary 6.2.3, page 179 *)



(* ================================================== defn:decidable-equality *)
(* Definition 6.2.4, page 179 *)



(* ================================================== thm:hedberg *)
(* Theorem 6.2.6, page 180 *)



(* ================================================== prop:nat-is-set *)
(* Theorem 6.2.7, page 180 *)



(* ================================================== lem:hnull_to_map_hnull *)
(* Lemma 6.2.11, page 181 *)



(* ================================================== thm:hlevel-loops *)
(* Theorem 6.2.8, page 181 *)



(* ================================================== lem:hlevel-if-inhab-hlevel *)
(* Lemma 6.2.9, page 181 *)



(* ================================================== thm:sphere_n_hnull_to_hlevel_sn *)
(* Theorem 6.2.12, page 182 *)



(* ================================================== thm:ntype-nloop *)
(* Theorem 6.2.13, page 182 *)



(* ================================================== thm:truncn-ind *)
(* Theorem 6.3.2, page 184 *)



(* ================================================== thm:trunc-reflective *)
(* Lemma 6.3.3, page 184 *)



(* ================================================== reflectPequiv *)
(* Lemma 6.4.5, page 188 *)



(* ================================================== thm:reflsubuniv-retract *)
(* Lemma 6.4.8, page 190 *)



(* ================================================== thm:reflsubuniv-prod *)
(* Theorem 6.6.2, page 191 *)



(* ================================================== coneispb *)
(* Lemma 6.6.9, page 193 *)



(* ================================================== thm:reflsubuniv-pb *)
(* Theorem 6.6.10, page 194 *)



(* ================================================== thm:reflsubuniv-idtype *)
(* Corollary 6.6.11, page 194 *)



(* ================================================== thm:reflsubunv-forall *)
(* Theorem 6.6.12, page 194 *)



(* ================================================== reflectcommutespushout *)
(* Lemma 6.7.10, page 198 *)



(* ================================================== S1-universal-cover *)
(* Definition 7.2.2, page 216 *)



(* ================================================== lem:transport-s1-code *)
(* Lemma 7.2.3, page 217 *)



(* ================================================== lem:s1-decode-encode *)
(* Lemma 7.2.8, page 219 *)



(* ================================================== lem:s1-encode-decode *)
(* Lemma 7.2.9, page 219 *)



(* ================================================== cor:omega-s1 *)
(* Corollary 7.2.11, page 220 *)



(* ================================================== thm:encode-total-equiv *)
(* Corollary 7.2.14, page 221 *)



(* ================================================== connectedtotruncated *)
(* Lemma 7.3.2, page 222 *)



(* ================================================== cor:sn-connected *)
(* Corollary 7.3.4, page 224 *)



(* ================================================== lem:pik-nconnected *)
(* Lemma 7.4.3, page 224 *)



(* ================================================== thm:naive-van-kampen *)
(* Theorem 7.5.4, page 228 *)



(* ================================================== eg:circle *)
(* Example 7.5.6, page 229 *)



(* ================================================== eg:suspension *)
(* Example 7.5.7, page 230 *)



(* ================================================== eg:wedge *)
(* Example 7.5.8, page 230 *)



(* ================================================== thm:kbar *)
(* Lemma 7.5.9, page 231 *)



(* ================================================== eg:clvk *)
(* Example 7.5.13, page 233 *)



(* ================================================== eg:cofiber *)
(* Example 7.5.14, page 233 *)



(* ================================================== eg:torus *)
(* Example 7.5.15, page 233 *)



(* ================================================== eg:kg1 *)
(* Example 7.5.17, page 234 *)



(* ================================================== thm:whitehead0 *)
(* Theorem 7.6.1, page 235 *)



(* ================================================== thm:whitehead1 *)
(* Corollary 7.6.2, page 236 *)



(* ================================================== thm:whiteheadn *)
(* Theorem 7.6.3, page 236 *)



(* ================================================== ct:precategory *)
(* Definition 8.1.1, page 238 *)



(* ================================================== ct:isomorphism *)
(* Definition 8.1.2, page 239 *)



(* ================================================== ct:isoprop *)
(* Lemma 8.1.3, page 239 *)



(* ================================================== ct:orders *)
(* Example 8.1.14, page 240 *)



(* ================================================== ct:precatset *)
(* Example 8.1.5, page 240 *)



(* ================================================== ct:category *)
(* Definition 8.1.6, page 240 *)



(* ================================================== ct:eg:set *)
(* Example 8.1.7, page 240 *)



(* ================================================== ct:obj-1type *)
(* Lemma 8.1.8, page 240 *)



(* ================================================== ct:idtoiso-trans *)
(* Lemma 8.1.9, page 240 *)



(* ================================================== ct:gaunt *)
(* Example 8.1.15, page 241 *)



(* ================================================== ct:discrete *)
(* Example 8.1.16, page 241 *)



(* ================================================== ct:fundgpd *)
(* Example 8.1.17, page 241 *)



(* ================================================== ct:hoprecat *)
(* Example 8.1.18, page 241 *)



(* ================================================== ct:rel *)
(* Example 8.1.19, page 241 *)



(* ================================================== ct:functor *)
(* Definition 8.2.1, page 242 *)



(* ================================================== ct:nattrans *)
(* Definition 8.2.2, page 243 *)



(* ================================================== ct:functor-precat *)
(* Definition 8.2.3, page 243 *)



(* ================================================== ct:natiso *)
(* Lemma 8.2.4, page 243 *)



(* ================================================== ct:functor-cat *)
(* Theorem 8.2.5, page 243 *)



(* ================================================== ct:interchange *)
(* Lemma 8.2.8, page 245 *)



(* ================================================== ct:functor-assoc *)
(* Lemma 8.2.9, page 245 *)



(* ================================================== ct:pentagon *)
(* Lemma 8.2.10, page 246 *)



(* ================================================== ct:units *)
(* Lemma 8.2.11, page 246 *)



(* ================================================== ct:adjprop *)
(* Lemma 8.3.2, page 247 *)



(* ================================================== ct:adjointification *)
(* Lemma 8.4.2, page 247 *)



(* ================================================== ct:ffeso *)
(* Lemma 8.4.5, page 248 *)



(* ================================================== ct:catweq *)
(* Lemma 8.4.7, page 249 *)



(* ================================================== ct:isocat *)
(* Definition 8.4.8, page 250 *)



(* ================================================== ct:isoprecat *)
(* Lemma 8.4.9, page 250 *)



(* ================================================== ct:chaotic *)
(* Example 8.4.13, page 252 *)



(* ================================================== ct:eqv-levelwise *)
(* Lemma 8.4.14, page 252 *)



(* ================================================== ct:cat-eq-iso *)
(* Lemma 8.4.15, page 253 *)



(* ================================================== ct:cat-2cat *)
(* Theorem 8.4.16, page 253 *)



(* ================================================== ct:functorexpadj *)
(* Lemma 8.5.3, page 254 *)



(* ================================================== ct:yoneda *)
(* Theorem 8.5.4, page 255 *)



(* ================================================== ct:adj-repr *)
(* Lemma 8.5.10, page 256 *)



(* ================================================== ct:yoneda-embedding *)
(* Corollary 8.5.6, page 256 *)



(* ================================================== ct:yoneda-mono *)
(* Corollary 8.5.7, page 256 *)



(* ================================================== ct:representable *)
(* Definition 8.5.8, page 256 *)



(* ================================================== ct:representable-prop *)
(* Theorem 8.5.9, page 256 *)



(* ================================================== ct:adjprop2 *)
(* Corollary 8.5.11, page 257 *)



(* ================================================== ct:galois *)
(* Example 8.6.3, page 258 *)



(* ================================================== ct:idtounitary *)
(* Lemma 8.7.3, page 259 *)



(* ================================================== ct:hilb *)
(* Example 8.7.7, page 259 *)



(* ================================================== ct:sig *)
(* Definition 8.8.1, page 260 *)



(* ================================================== thm:sip *)
(* Theorem 8.8.2, page 261 *)



(* ================================================== ct:sip-functor-cat *)
(* Example 8.8.3, page 261 *)



(* ================================================== defn:fo-notion-of-structure *)
(* Definition 8.8.4, page 262 *)



(* ================================================== ct:cat-weq-eq *)
(* Theorem 8.9.4, page 265 *)



(* ================================================== ct:hocat *)
(* Example 8.9.7, page 270 *)



(* ================================================== ct:pre2cat *)
(* Exercise 8.4, page 271 *)



(* ================================================== ct:2cat *)
(* Exercise 8.5, page 271 *)



(* ================================================== ct:groupoids *)
(* Exercise 8.6, page 271 *)



(* ================================================== ct:ex:hocat *)
(* Exercise 8.9, page 272 *)



(* ================================================== epis-surj *)
(* Lemma 9.1.7, page 275 *)



(* ================================================== lem:images_are_coequalizers *)
(* Lemma 9.1.8, page 277 *)



(* ================================================== lem:pb_of_coeq_is_coeq *)
(* Lemma 9.1.9, page 278 *)



(* ================================================== thm:set_regular *)
(* Theorem 9.1.10, page 279 *)



(* ================================================== lem:sets_exact *)
(* Lemma 9.1.12, page 279 *)



(* ================================================== prop:kernels_are_effective *)
(* Theorem 9.1.13, page 280 *)



(* ================================================== lem:replacement *)
(* Lemma 9.1.15, page 282 *)



(* ================================================== thm:nobject_classifier_appetizer *)
(* Theorem 9.1.16, page 282 *)



(* ================================================== thm:nobject_classifier *)
(* Theorem 9.1.18, page 283 *)



(* ================================================== lem:subobject *)
(* Lemma 9.1.19, page 284 *)



(* ================================================== prop:trunc_of_prop_is_set *)
(* Lemma 9.1.21, page 285 *)



(* ================================================== thm:1surj_to_surj_to_pem *)
(* Theorem 9.1.23, page 286 *)



(* ================================================== defn:small_maps *)
(* Definition 9.2.1, page 287 *)



(* ================================================== card:semiring *)
(* Lemma 9.7.5, page 290 *)



(* ================================================== card:exp *)
(* Lemma 9.7.7, page 290 *)



(* ================================================== thm:injsurj *)
(* Lemma 9.7.10, page 291 *)



(* ================================================== thm:wfmin *)
(* Lemma 9.8.6, page 294 *)



(* ================================================== def:simulation *)
(* Definition 9.8.9, page 295 *)



(* ================================================== thm:wfcat *)
(* Corollary 9.8.13, page 296 *)



(* ================================================== thm:ordord *)
(* Theorem 9.8.17, page 297 *)



(* ================================================== thm:ordsucc *)
(* Lemma 9.8.19, page 297 *)



(* ================================================== thm:ordunion *)
(* Lemma 9.8.20, page 298 *)



(* ================================================== thm:wellorder *)
(* Theorem 9.9.3, page 299 *)



(* ================================================== thm:wop *)
(* Theorem 9.9.4, page 299 *)



(* ================================================== defn:cauchy-approximation *)
(* Definition 10.3.1, page 304 *)



(* ================================================== defn:cauchy-reals *)
(* Definition 10.3.4, page 305 *)



(* ================================================== lem:RC-well-defined *)
(* Lemma 10.3.7, page 306 *)



(* ================================================== RC-lim-factor *)
(* Lemma 10.3.10, page 308 *)



(* ================================================== eq:RC-seq-induction-i *)
(* Lemma 10.3.11, page 308 *)



(* ================================================== RC-seq-induction *)
(* Lemma 10.3.11, page 308 *)



(* ================================================== RC-lim-onto *)
(* Lemma 10.3.9, page 308 *)



(* ================================================== RC-sim-uniformity-properties *)
(* Lemma 10.3.13, page 309 *)



(* ================================================== RC-Lipschitz-eq *)
(* Lemma 10.3.16, page 310 *)



(* ================================================== RC-extend-Q-Lipschitz *)
(* Lemma 10.3.17, page 310 *)



(* ================================================== RC-commutative-group *)
(* Theorem 10.3.18, page 312 *)



(* ================================================== RC-sim-eqv-le *)
(* Theorem 10.3.19, page 312 *)



