N: 24 "Indecomposable_ind" [body=yes, kind=cnst, prop=yes, path="Sum", ];
N: 23 "Indecomposable_rec" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 25 "Indecomposable_rect" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 22 "Indecomposable_sind" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 69 "ap_functor_sum" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 111 "code_sum" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 99 "decidable_hfiber_inl" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 97 "decidable_hfiber_inr" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 86 "decidable_is_inl" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 85 "decidable_is_inr" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 8 "decidable_sum" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 7 "decidablepaths_sum" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 32 "decompose_l" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 31 "decompose_r" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 104 "eisretr_path_sum" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 103 "eissect_path_sum" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 96 "equiv_decidable_sum" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 95 "equiv_decidable_sum_l" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 94 "equiv_decidable_sum_r" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 30 "equiv_decompose" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 49 "equiv_functor_sum" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 48 "equiv_functor_sum'" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 47 "equiv_functor_sum_l" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 46 "equiv_functor_sum_r" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 18 "equiv_indecomposable_sum" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 101 "equiv_path_sum" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 33 "equiv_sigma_sum" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 38 "equiv_sum_assoc" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 12 "equiv_sum_distributive" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 13 "equiv_sum_ind" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 39 "equiv_sum_symm" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 40 "equiv_unfunctor_sum" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 16 "equiv_unfunctor_sum_contr_ll" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 17 "equiv_unfunctor_sum_indecomposable_ll" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 43 "equiv_unfunctor_sum_l" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 41 "equiv_unfunctor_sum_r" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 112 "eta_sum" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 70 "functor_code_sum" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 71 "functor_sum" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 65 "functor_sum_compose" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 66 "functor_sum_homotopic" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 64 "functor_sum_idmap" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 68 "hfiber_functor_sum_l" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 67 "hfiber_functor_sum_r" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 54 "hfiber_unfunctor_sum_l" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 56 "hfiber_unfunctor_sum_l_subproof" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 55 "hfiber_unfunctor_sum_l_subproof0" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 51 "hfiber_unfunctor_sum_r" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 53 "hfiber_unfunctor_sum_r_subproof" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 52 "hfiber_unfunctor_sum_r_subproof0" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 45 "iff_functor_sum" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 19 "indecomposable_contr" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 21 "indecompose" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 20 "indecompose0" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 108 "inl_ne_inr" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 78 "inl_un_inl" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 107 "inr_ne_inl" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 77 "inr_un_inr" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 90 "is_inl" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 92 "is_inl_and" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 29 "is_inl_decompose_l" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 73 "is_inl_ind" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 82 "is_inl_not_inr" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 74 "is_inl_or_is_inr" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 89 "is_inr" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 91 "is_inr_and" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 28 "is_inr_decompose_r" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 72 "is_inr_ind" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 81 "is_inr_not_inl" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 50 "isequiv_functor_sum" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 102 "isequiv_path_sum" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 3 "isequiv_sig_of_sum" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 14 "isequiv_sum_ind" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 2 "isequiv_sum_of_sig" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 44 "isequiv_unfunctor_sum_l" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 42 "isequiv_unfunctor_sum_r" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 6 "ishprop_decidable_hprop" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 100 "ishprop_hfiber_inl" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 98 "ishprop_hfiber_inr" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 88 "ishprop_is_inl" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 87 "ishprop_is_inr" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 9 "ishprop_sum" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 10 "ishset_sum" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 11 "istrunc_sum" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 76 "not_is_inl_and_inr" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 75 "not_is_inl_and_inr'" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 110 "path_sum" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 106 "path_sum_inl" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 105 "path_sum_inr" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 109 "path_sum_inv" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 5 "sig_of_sum" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 35 "sum_distrib_l" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 34 "sum_distrib_r" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 37 "sum_empty_l" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 36 "sum_empty_r" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 114 "sum_ind" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 15 "sum_ind_uncurried" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 4 "sum_of_sig" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 113 "sum_rec" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 93 "transport_sum" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 1 "trunc_sum'" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 84 "un_inl" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 80 "un_inl_inl" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 83 "un_inr" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 79 "un_inr_inr" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 61 "unfunctor_sum_eta" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 63 "unfunctor_sum_l" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 60 "unfunctor_sum_l_beta" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 58 "unfunctor_sum_l_compose" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 62 "unfunctor_sum_r" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 59 "unfunctor_sum_r_beta" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 57 "unfunctor_sum_r_compose" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 27 "Indecomposable" [kind=inductive, prop=no, path="Sum", ];
N: 26 "Build_Indecomposable" [kind=construct, prop=no, path="Sum", ];
E: 1 2 [weight=1, ];
E: 1 4 [weight=1, ];
E: 2 3 [weight=1, ];
E: 2 4 [weight=1, ];
E: 2 5 [weight=1, ];
E: 3 4 [weight=9, ];
E: 3 5 [weight=10, ];
E: 6 9 [weight=1, ];
E: 7 102 [weight=4, ];
E: 7 111 [weight=2, ];
E: 10 11 [weight=1, ];
E: 11 101 [weight=1, ];
E: 11 111 [weight=4, ];
E: 12 13 [weight=1, ];
E: 13 14 [weight=1, ];
E: 13 15 [weight=1, ];
E: 14 15 [weight=12, ];
E: 15 114 [weight=1, ];
E: 16 17 [weight=1, ];
E: 16 19 [weight=1, ];
E: 16 48 [weight=1, ];
E: 17 18 [weight=3, ];
E: 17 27 [weight=2, ];
E: 17 30 [weight=2, ];
E: 17 31 [weight=110, ];
E: 17 32 [weight=131, ];
E: 17 38 [weight=4, ];
E: 17 39 [weight=1, ];
E: 17 40 [weight=1, ];
E: 17 48 [weight=6, ];
E: 17 74 [weight=1, ];
E: 17 89 [weight=5, ];
E: 17 90 [weight=5, ];
E: 18 27 [weight=2, ];
E: 18 36 [weight=1, ];
E: 18 37 [weight=1, ];
E: 18 40 [weight=2, ];
E: 18 89 [weight=4, ];
E: 18 90 [weight=4, ];
E: 19 26 [weight=1, ];
E: 19 27 [weight=1, ];
E: 19 74 [weight=1, ];
E: 19 89 [weight=7, ];
E: 19 90 [weight=7, ];
E: 20 27 [weight=2, ];
E: 21 27 [weight=2, ];
E: 21 89 [weight=1, ];
E: 21 90 [weight=1, ];
E: 22 26 [weight=2, ];
E: 22 27 [weight=4, ];
E: 22 89 [weight=2, ];
E: 22 90 [weight=2, ];
E: 23 25 [weight=1, ];
E: 23 26 [weight=1, ];
E: 23 27 [weight=3, ];
E: 23 89 [weight=1, ];
E: 23 90 [weight=1, ];
E: 24 26 [weight=2, ];
E: 24 27 [weight=4, ];
E: 24 89 [weight=2, ];
E: 24 90 [weight=2, ];
E: 25 26 [weight=2, ];
E: 25 27 [weight=4, ];
E: 25 89 [weight=2, ];
E: 25 90 [weight=2, ];
E: 26 89 [weight=1, ];
E: 26 90 [weight=1, ];
E: 27 89 [weight=1, ];
E: 27 90 [weight=1, ];
E: 28 30 [weight=1, ];
E: 28 31 [weight=3, ];
E: 28 32 [weight=1, ];
E: 28 89 [weight=1, ];
E: 29 30 [weight=1, ];
E: 29 31 [weight=1, ];
E: 29 32 [weight=3, ];
E: 29 90 [weight=1, ];
E: 30 31 [weight=1, ];
E: 30 32 [weight=1, ];
E: 30 74 [weight=9, ];
E: 30 75 [weight=2, ];
E: 30 87 [weight=1, ];
E: 30 88 [weight=1, ];
E: 30 89 [weight=204, ];
E: 30 90 [weight=204, ];
E: 30 114 [weight=25, ];
E: 31 89 [weight=1, ];
E: 32 90 [weight=1, ];
E: 36 37 [weight=1, ];
E: 36 39 [weight=1, ];
E: 40 41 [weight=1, ];
E: 40 43 [weight=1, ];
E: 40 89 [weight=2, ];
E: 40 90 [weight=2, ];
E: 41 42 [weight=1, ];
E: 41 62 [weight=1, ];
E: 41 89 [weight=2, ];
E: 41 90 [weight=2, ];
E: 42 57 [weight=2, ];
E: 42 59 [weight=2, ];
E: 42 62 [weight=17, ];
E: 42 72 [weight=8, ];
E: 42 89 [weight=40, ];
E: 42 90 [weight=17, ];
E: 42 105 [weight=2, ];
E: 43 44 [weight=1, ];
E: 43 63 [weight=1, ];
E: 43 89 [weight=2, ];
E: 43 90 [weight=2, ];
E: 44 58 [weight=2, ];
E: 44 60 [weight=2, ];
E: 44 63 [weight=17, ];
E: 44 73 [weight=8, ];
E: 44 89 [weight=17, ];
E: 44 90 [weight=40, ];
E: 44 106 [weight=2, ];
E: 45 71 [weight=2, ];
E: 46 48 [weight=1, ];
E: 47 48 [weight=1, ];
E: 48 49 [weight=1, ];
E: 49 50 [weight=1, ];
E: 49 71 [weight=1, ];
E: 50 71 [weight=73, ];
E: 51 52 [weight=1, ];
E: 51 53 [weight=30, ];
E: 51 62 [weight=122, ];
E: 51 77 [weight=30, ];
E: 51 83 [weight=2, ];
E: 51 89 [weight=2, ];
E: 51 90 [weight=24, ];
E: 51 102 [weight=2, ];
E: 51 105 [weight=17, ];
E: 51 110 [weight=1, ];
E: 51 111 [weight=1, ];
E: 52 90 [weight=4, ];
E: 53 62 [weight=2, ];
E: 53 89 [weight=2, ];
E: 53 90 [weight=4, ];
E: 54 55 [weight=1, ];
E: 54 56 [weight=30, ];
E: 54 63 [weight=122, ];
E: 54 78 [weight=30, ];
E: 54 84 [weight=2, ];
E: 54 89 [weight=24, ];
E: 54 90 [weight=2, ];
E: 54 102 [weight=2, ];
E: 54 106 [weight=17, ];
E: 54 110 [weight=1, ];
E: 54 111 [weight=1, ];
E: 55 89 [weight=4, ];
E: 56 63 [weight=2, ];
E: 56 89 [weight=4, ];
E: 56 90 [weight=2, ];
E: 57 59 [weight=3, ];
E: 57 62 [weight=18, ];
E: 57 72 [weight=7, ];
E: 57 89 [weight=11, ];
E: 57 105 [weight=1, ];
E: 58 60 [weight=3, ];
E: 58 63 [weight=18, ];
E: 58 73 [weight=7, ];
E: 58 90 [weight=11, ];
E: 58 106 [weight=1, ];
E: 59 62 [weight=3, ];
E: 59 77 [weight=1, ];
E: 59 89 [weight=2, ];
E: 60 63 [weight=3, ];
E: 60 78 [weight=1, ];
E: 60 90 [weight=2, ];
E: 61 62 [weight=6, ];
E: 61 63 [weight=6, ];
E: 61 71 [weight=5, ];
E: 61 77 [weight=1, ];
E: 61 78 [weight=1, ];
E: 61 89 [weight=2, ];
E: 61 90 [weight=2, ];
E: 62 83 [weight=1, ];
E: 62 89 [weight=2, ];
E: 63 84 [weight=1, ];
E: 63 90 [weight=2, ];
E: 64 71 [weight=3, ];
E: 65 71 [weight=13, ];
E: 66 71 [weight=6, ];
E: 67 71 [weight=54, ];
E: 67 102 [weight=2, ];
E: 67 105 [weight=9, ];
E: 67 108 [weight=10, ];
E: 67 110 [weight=2, ];
E: 67 111 [weight=2, ];
E: 68 71 [weight=54, ];
E: 68 102 [weight=2, ];
E: 68 106 [weight=9, ];
E: 68 107 [weight=10, ];
E: 68 110 [weight=2, ];
E: 68 111 [weight=2, ];
E: 69 70 [weight=10, ];
E: 69 71 [weight=48, ];
E: 69 110 [weight=18, ];
E: 69 111 [weight=11, ];
E: 70 71 [weight=16, ];
E: 70 111 [weight=19, ];
E: 72 89 [weight=4, ];
E: 73 90 [weight=4, ];
E: 74 89 [weight=3, ];
E: 74 90 [weight=3, ];
E: 75 76 [weight=1, ];
E: 75 89 [weight=1, ];
E: 75 90 [weight=1, ];
E: 76 91 [weight=4, ];
E: 76 92 [weight=4, ];
E: 77 83 [weight=4, ];
E: 77 89 [weight=5, ];
E: 78 84 [weight=4, ];
E: 78 90 [weight=5, ];
E: 79 83 [weight=2, ];
E: 79 89 [weight=2, ];
E: 80 84 [weight=2, ];
E: 80 90 [weight=2, ];
E: 81 90 [weight=2, ];
E: 82 89 [weight=2, ];
E: 83 89 [weight=4, ];
E: 84 90 [weight=4, ];
E: 85 89 [weight=3, ];
E: 86 90 [weight=3, ];
E: 87 89 [weight=3, ];
E: 88 90 [weight=3, ];
E: 89 91 [weight=1, ];
E: 90 92 [weight=1, ];
E: 94 96 [weight=2, ];
E: 95 96 [weight=2, ];
E: 97 101 [weight=1, ];
E: 97 107 [weight=3, ];
E: 97 111 [weight=3, ];
E: 98 101 [weight=1, ];
E: 98 107 [weight=3, ];
E: 98 111 [weight=3, ];
E: 99 101 [weight=1, ];
E: 99 108 [weight=3, ];
E: 99 111 [weight=3, ];
E: 100 101 [weight=1, ];
E: 100 108 [weight=3, ];
E: 100 111 [weight=3, ];
E: 101 102 [weight=1, ];
E: 101 110 [weight=1, ];
E: 101 111 [weight=2, ];
E: 102 103 [weight=8, ];
E: 102 104 [weight=10, ];
E: 102 109 [weight=17, ];
E: 102 110 [weight=52, ];
E: 102 111 [weight=16, ];
E: 103 109 [weight=11, ];
E: 103 110 [weight=11, ];
E: 103 111 [weight=20, ];
E: 104 109 [weight=5, ];
E: 104 110 [weight=5, ];
E: 104 111 [weight=2, ];
E: 105 109 [weight=1, ];
E: 106 109 [weight=1, ];
E: 107 109 [weight=1, ];
E: 108 109 [weight=1, ];
E: 110 111 [weight=11, ];
