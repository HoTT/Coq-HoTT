N: 27 "IsAlgebraicFlabbyType_ind" [body=yes, kind=cnst, prop=yes, path="InjectiveTypes", ];
N: 26 "IsAlgebraicFlabbyType_rec" [body=yes, kind=cnst, prop=no, path="InjectiveTypes", ];
N: 28 "IsAlgebraicFlabbyType_rect" [body=yes, kind=cnst, prop=no, path="InjectiveTypes", ];
N: 25 "IsAlgebraicFlabbyType_sind" [body=yes, kind=cnst, prop=no, path="InjectiveTypes", ];
N: 45 "IsAlgebraicInjectiveType_ind" [body=yes, kind=cnst, prop=yes, path="InjectiveTypes", ];
N: 44 "IsAlgebraicInjectiveType_rec" [body=yes, kind=cnst, prop=no, path="InjectiveTypes", ];
N: 46 "IsAlgebraicInjectiveType_rect" [body=yes, kind=cnst, prop=no, path="InjectiveTypes", ];
N: 43 "IsAlgebraicInjectiveType_sind" [body=yes, kind=cnst, prop=no, path="InjectiveTypes", ];
N: 49 "IsInjectiveType" [body=yes, kind=cnst, prop=no, path="InjectiveTypes", ];
N: 15 "alg_flab_Type_forall" [body=yes, kind=cnst, prop=no, path="InjectiveTypes", ];
N: 16 "alg_flab_Type_sigma" [body=yes, kind=cnst, prop=no, path="InjectiveTypes", ];
N: 19 "alg_flab_alg_inj" [body=yes, kind=cnst, prop=no, path="InjectiveTypes", ];
N: 21 "alg_flab_cconst_is_const" [body=yes, kind=cnst, prop=no, path="InjectiveTypes", ];
N: 3 "alg_flab_pointed_lem" [body=yes, kind=cnst, prop=no, path="InjectiveTypes", ];
N: 37 "alg_inj_Type_forall" [body=yes, kind=cnst, prop=no, path="InjectiveTypes", ];
N: 38 "alg_inj_Type_sigma" [body=yes, kind=cnst, prop=no, path="InjectiveTypes", ];
N: 18 "alg_inj_alg_flab" [body=yes, kind=cnst, prop=no, path="InjectiveTypes", ];
N: 34 "alg_inj_arrow" [body=yes, kind=cnst, prop=no, path="InjectiveTypes", ];
N: 40 "alg_inj_contr" [body=yes, kind=cnst, prop=no, path="InjectiveTypes", ];
N: 35 "alg_inj_forall" [body=yes, kind=cnst, prop=no, path="InjectiveTypes", ];
N: 36 "alg_inj_retract" [body=yes, kind=cnst, prop=no, path="InjectiveTypes", ];
N: 11 "alg_inj_retract_power_universe" [body=yes, kind=cnst, prop=no, path="InjectiveTypes", ];
N: 31 "alg_uuinj_alg_usu_inj" [body=yes, kind=cnst, prop=no, path="InjectiveTypes", ];
N: 20 "cconst_is_const_alg_flab" [body=yes, kind=cnst, prop=no, path="InjectiveTypes", ];
N: 22 "cconst_is_const_cond" [body=yes, kind=cnst, prop=no, path="InjectiveTypes", ];
N: 24 "center_af" [body=yes, kind=cnst, prop=no, path="InjectiveTypes", ];
N: 23 "contr_af" [body=yes, kind=cnst, prop=no, path="InjectiveTypes", ];
N: 2 "decidable_alg_flab_hprop" [body=yes, kind=cnst, prop=no, path="InjectiveTypes", ];
N: 10 "inj_alg_inj" [body=yes, kind=cnst, prop=no, path="InjectiveTypes", ];
N: 6 "inj_arrow" [body=yes, kind=cnst, prop=no, path="InjectiveTypes", ];
N: 9 "inj_merely_alg_inj" [body=yes, kind=cnst, prop=no, path="InjectiveTypes", ];
N: 8 "inj_retract" [body=yes, kind=cnst, prop=no, path="InjectiveTypes", ];
N: 41 "is_ext_ai" [body=yes, kind=cnst, prop=no, path="InjectiveTypes", ];
N: 1 "lem_pointed_types_alg_flab" [body=yes, kind=cnst, prop=no, path="InjectiveTypes", ];
N: 42 "lift_ai" [body=yes, kind=cnst, prop=no, path="InjectiveTypes", ];
N: 4 "merely_alg_inj_inj" [body=yes, kind=cnst, prop=no, path="InjectiveTypes", ];
N: 7 "merely_retract_inj_embedding" [body=yes, kind=cnst, prop=no, path="InjectiveTypes", ];
N: 5 "merely_retract_power_universe_inj" [body=yes, kind=cnst, prop=no, path="InjectiveTypes", ];
N: 39 "not_alg_inj_empty" [body=yes, kind=cnst, prop=no, path="InjectiveTypes", ];
N: 17 "resize_alg_inj" [body=yes, kind=cnst, prop=no, path="InjectiveTypes", ];
N: 33 "retract_alg_inj_embedding" [body=yes, kind=cnst, prop=no, path="InjectiveTypes", ];
N: 12 "retract_power_universe_alg_inj" [body=yes, kind=cnst, prop=no, path="InjectiveTypes", ];
N: 32 "retract_power_universe_alg_usuinj" [body=yes, kind=cnst, prop=no, path="InjectiveTypes", ];
N: 14 "universe_independent_alg_flab" [body=yes, kind=cnst, prop=no, path="InjectiveTypes", ];
N: 13 "universe_independent_alg_inj" [body=yes, kind=cnst, prop=no, path="InjectiveTypes", ];
N: 30 "IsAlgebraicFlabbyType" [kind=inductive, prop=no, path="InjectiveTypes", ];
N: 48 "IsAlgebraicInjectiveType" [kind=inductive, prop=no, path="InjectiveTypes", ];
N: 29 "Build_IsAlgebraicFlabbyType" [kind=construct, prop=no, path="InjectiveTypes", ];
N: 47 "Build_IsAlgebraicInjectiveType" [kind=construct, prop=no, path="InjectiveTypes", ];
E: 1 2 [weight=1, ];
E: 1 30 [weight=2, ];
E: 2 30 [weight=2, ];
E: 3 29 [weight=1, ];
E: 3 30 [weight=1, ];
E: 4 5 [weight=1, ];
E: 4 11 [weight=1, ];
E: 4 48 [weight=2, ];
E: 4 49 [weight=2, ];
E: 5 7 [weight=1, ];
E: 5 49 [weight=2, ];
E: 6 49 [weight=4, ];
E: 7 49 [weight=2, ];
E: 8 49 [weight=4, ];
E: 9 10 [weight=1, ];
E: 9 48 [weight=4, ];
E: 9 49 [weight=2, ];
E: 10 48 [weight=2, ];
E: 10 49 [weight=2, ];
E: 11 34 [weight=1, ];
E: 11 36 [weight=1, ];
E: 11 37 [weight=1, ];
E: 11 48 [weight=1, ];
E: 12 13 [weight=1, ];
E: 12 32 [weight=1, ];
E: 12 48 [weight=2, ];
E: 13 14 [weight=1, ];
E: 13 18 [weight=1, ];
E: 13 19 [weight=1, ];
E: 13 48 [weight=3, ];
E: 14 29 [weight=1, ];
E: 14 30 [weight=3, ];
E: 15 29 [weight=1, ];
E: 15 30 [weight=1, ];
E: 16 29 [weight=1, ];
E: 16 30 [weight=1, ];
E: 17 18 [weight=1, ];
E: 17 19 [weight=1, ];
E: 17 48 [weight=3, ];
E: 18 30 [weight=2, ];
E: 18 47 [weight=1, ];
E: 18 48 [weight=1, ];
E: 19 29 [weight=1, ];
E: 19 30 [weight=1, ];
E: 19 48 [weight=2, ];
E: 20 22 [weight=2, ];
E: 20 30 [weight=2, ];
E: 21 22 [weight=2, ];
E: 21 29 [weight=1, ];
E: 21 30 [weight=1, ];
E: 23 30 [weight=2, ];
E: 24 30 [weight=2, ];
E: 25 29 [weight=2, ];
E: 25 30 [weight=4, ];
E: 26 28 [weight=1, ];
E: 26 29 [weight=1, ];
E: 26 30 [weight=3, ];
E: 27 29 [weight=2, ];
E: 27 30 [weight=4, ];
E: 28 29 [weight=2, ];
E: 28 30 [weight=4, ];
E: 31 47 [weight=1, ];
E: 31 48 [weight=3, ];
E: 32 33 [weight=1, ];
E: 32 48 [weight=2, ];
E: 33 48 [weight=2, ];
E: 34 35 [weight=1, ];
E: 34 48 [weight=3, ];
E: 35 47 [weight=1, ];
E: 35 48 [weight=3, ];
E: 36 47 [weight=1, ];
E: 36 48 [weight=3, ];
E: 37 47 [weight=1, ];
E: 37 48 [weight=1, ];
E: 38 47 [weight=1, ];
E: 38 48 [weight=1, ];
E: 39 48 [weight=2, ];
E: 40 47 [weight=1, ];
E: 40 48 [weight=1, ];
E: 41 48 [weight=2, ];
E: 42 48 [weight=2, ];
E: 43 47 [weight=2, ];
E: 43 48 [weight=4, ];
E: 44 46 [weight=1, ];
E: 44 47 [weight=1, ];
E: 44 48 [weight=3, ];
E: 45 47 [weight=2, ];
E: 45 48 [weight=4, ];
E: 46 47 [weight=2, ];
E: 46 48 [weight=4, ];
