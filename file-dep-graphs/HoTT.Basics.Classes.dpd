N: 2 "AntiSymmetric" [body=yes, kind=cnst, prop=no, path="Classes", ];
N: 8 "IsInjective" [body=yes, kind=cnst, prop=no, path="Classes", ];
N: 1 "antisymmetry" [body=yes, kind=cnst, prop=no, path="Classes", ];
N: 7 "injective" [body=yes, kind=cnst, prop=no, path="Classes", ];
N: 3 "isinj_cancelL" [body=yes, kind=cnst, prop=no, path="Classes", ];
N: 4 "isinj_compose" [body=yes, kind=cnst, prop=no, path="Classes", ];
N: 5 "isinj_idmap" [body=yes, kind=cnst, prop=no, path="Classes", ];
N: 6 "neq_isinj" [body=yes, kind=cnst, prop=no, path="Classes", ];
N: 9 "pointwise_moveL_equiv" [body=yes, kind=cnst, prop=no, path="Classes", ];
N: 10 "pointwise_moveR_equiv" [body=yes, kind=cnst, prop=no, path="Classes", ];
N: 11 "pointwise_precomp" [body=yes, kind=cnst, prop=no, path="Classes", ];
N: 14 "reflexive_pointwise" [body=yes, kind=cnst, prop=no, path="Classes", ];
N: 15 "relation_pointwise" [body=yes, kind=cnst, prop=no, path="Classes", ];
N: 12 "symmetric_pointwise" [body=yes, kind=cnst, prop=no, path="Classes", ];
N: 13 "transitive_pointwise" [body=yes, kind=cnst, prop=no, path="Classes", ];
E: 1 2 [weight=2, ];
E: 3 7 [weight=1, ];
E: 3 8 [weight=4, ];
E: 4 7 [weight=2, ];
E: 4 8 [weight=6, ];
E: 5 8 [weight=1, ];
E: 6 7 [weight=1, ];
E: 6 8 [weight=2, ];
E: 7 8 [weight=2, ];
E: 9 10 [weight=1, ];
E: 9 15 [weight=2, ];
E: 10 15 [weight=4, ];
E: 11 15 [weight=3, ];
E: 12 15 [weight=4, ];
E: 13 15 [weight=5, ];
E: 14 15 [weight=3, ];
