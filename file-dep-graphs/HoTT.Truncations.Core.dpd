N: 18 "BuildIsSurjection" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 7 "O_leq_Tr_leq" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 43 "Tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 38 "Trunc_functor" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 34 "Trunc_functor_compose" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 35 "Trunc_functor_equiv" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 33 "Trunc_functor_idmap" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 36 "Trunc_functor_isequiv" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 1 "Trunc_ind" [body=yes, kind=cnst, prop=no, path="Core.Trunc", ];
N: 6 "Trunc_min" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 45 "Trunc_rec" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 44 "Trunc_rec_tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 5 "Trunc_swap" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 9 "ap_paths_inverse" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 15 "cancelR_issurjection" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 13 "contr_hfiber_emb" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 23 "contr_tr_minus_two" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 24 "decidable_trunc_decidable" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 32 "equiv_Trunc_prod_cmp" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 16 "equiv_merely_issurjection" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 40 "equiv_tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 21 "hexists" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 19 "himage" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 20 "hor" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 17 "iff_merely_issurjection" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 30 "inO_tr_istrunc" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 37 "is0functor_Tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 31 "is1functor_Tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 8 "isembedding_paths" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 10 "isembedding_precompose_surjection_hset" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 11 "isequiv_isequiv_compose_embedding" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 12 "isequiv_surj_emb" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 41 "isequiv_tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 14 "issurj_retr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 29 "istrunc_inO_tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 2 "istrunc_truncation" [body=no, kind=cnst, prop=no, path="Core.Trunc", ];
N: 27 "istruncmap_mapinO_tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 28 "mapinO_tr_istruncmap" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 22 "merely" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 25 "merely_inhabited_iff_inhabited_stable" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 42 "trunc_iff_isequiv_truncation" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 26 "trunc_inhabited_iff_inhabited_stable" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 39 "untrunc_istrunc" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 4 "Trunc" [kind=inductive, prop=no, path="Core.Trunc", ];
N: 3 "tr" [kind=construct, prop=no, path="Core.Trunc", ];
E: 1 3 [weight=2, ];
E: 1 4 [weight=9, ];
E: 2 4 [weight=1, ];
E: 5 6 [weight=2, ];
E: 5 43 [weight=17, ];
E: 6 2 [weight=1, ];
E: 6 3 [weight=3, ];
E: 6 4 [weight=4, ];
E: 6 7 [weight=1, ];
E: 6 38 [weight=1, ];
E: 6 40 [weight=1, ];
E: 6 43 [weight=20, ];
E: 7 43 [weight=4, ];
E: 8 9 [weight=7, ];
E: 8 11 [weight=1, ];
E: 8 43 [weight=5, ];
E: 10 30 [weight=1, ];
E: 10 43 [weight=3, ];
E: 11 12 [weight=1, ];
E: 11 15 [weight=1, ];
E: 11 43 [weight=1, ];
E: 12 43 [weight=3, ];
E: 14 2 [weight=1, ];
E: 14 3 [weight=1, ];
E: 14 43 [weight=3, ];
E: 15 2 [weight=1, ];
E: 15 38 [weight=1, ];
E: 15 43 [weight=6, ];
E: 16 2 [weight=1, ];
E: 16 17 [weight=1, ];
E: 16 22 [weight=3, ];
E: 16 43 [weight=3, ];
E: 17 2 [weight=1, ];
E: 17 22 [weight=4, ];
E: 17 43 [weight=7, ];
E: 18 2 [weight=1, ];
E: 18 22 [weight=2, ];
E: 18 43 [weight=3, ];
E: 19 43 [weight=3, ];
E: 20 22 [weight=1, ];
E: 21 22 [weight=1, ];
E: 22 2 [weight=1, ];
E: 22 43 [weight=1, ];
E: 23 29 [weight=1, ];
E: 23 30 [weight=4, ];
E: 23 43 [weight=20, ];
E: 24 26 [weight=1, ];
E: 24 43 [weight=3, ];
E: 25 26 [weight=1, ];
E: 25 43 [weight=1, ];
E: 26 1 [weight=1, ];
E: 26 3 [weight=1, ];
E: 26 4 [weight=3, ];
E: 26 43 [weight=3, ];
E: 27 43 [weight=2, ];
E: 28 43 [weight=1, ];
E: 29 43 [weight=2, ];
E: 30 43 [weight=1, ];
E: 31 33 [weight=1, ];
E: 31 34 [weight=1, ];
E: 31 37 [weight=2, ];
E: 31 43 [weight=3, ];
E: 32 43 [weight=4, ];
E: 33 38 [weight=1, ];
E: 33 43 [weight=5, ];
E: 34 38 [weight=3, ];
E: 34 43 [weight=9, ];
E: 35 43 [weight=3, ];
E: 36 38 [weight=1, ];
E: 36 43 [weight=3, ];
E: 37 38 [weight=1, ];
E: 37 43 [weight=2, ];
E: 38 43 [weight=3, ];
E: 39 41 [weight=1, ];
E: 39 43 [weight=1, ];
E: 40 3 [weight=1, ];
E: 40 4 [weight=1, ];
E: 40 41 [weight=1, ];
E: 40 43 [weight=1, ];
E: 41 3 [weight=1, ];
E: 41 4 [weight=1, ];
E: 41 42 [weight=1, ];
E: 42 3 [weight=1, ];
E: 42 4 [weight=1, ];
E: 42 43 [weight=1, ];
E: 43 1 [weight=2, ];
E: 43 2 [weight=1, ];
E: 43 3 [weight=10, ];
E: 43 4 [weight=24, ];
E: 44 1 [weight=1, ];
E: 44 2 [weight=5, ];
E: 44 3 [weight=5, ];
E: 44 4 [weight=16, ];
E: 44 45 [weight=4, ];
E: 45 1 [weight=1, ];
E: 45 4 [weight=3, ];
