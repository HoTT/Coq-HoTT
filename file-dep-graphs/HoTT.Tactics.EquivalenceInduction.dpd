N: 33 "RespectsEquivalenceL" [body=yes, kind=cnst, prop=no, path="EquivalenceInduction", ];
N: 31 "RespectsEquivalenceR" [body=yes, kind=cnst, prop=no, path="EquivalenceInduction", ];
N: 26 "const_respects_equivalenceL" [body=yes, kind=cnst, prop=no, path="EquivalenceInduction", ];
N: 25 "const_respects_equivalenceR" [body=yes, kind=cnst, prop=no, path="EquivalenceInduction", ];
N: 3 "equiv_ap_inv_respects_equivalenceL" [body=yes, kind=cnst, prop=no, path="EquivalenceInduction", ];
N: 1 "equiv_ap_inv_respects_equivalenceR" [body=yes, kind=cnst, prop=no, path="EquivalenceInduction", ];
N: 4 "equiv_ap_respects_equivalenceL" [body=yes, kind=cnst, prop=no, path="EquivalenceInduction", ];
N: 2 "equiv_ap_respects_equivalenceR" [body=yes, kind=cnst, prop=no, path="EquivalenceInduction", ];
N: 7 "equiv_respects_equivalenceL" [body=yes, kind=cnst, prop=no, path="EquivalenceInduction", ];
N: 6 "equiv_respects_equivalenceR" [body=yes, kind=cnst, prop=no, path="EquivalenceInduction", ];
N: 16 "forall_respects_equivalenceL" [body=yes, kind=cnst, prop=no, path="EquivalenceInduction", ];
N: 15 "forall_respects_equivalenceR" [body=yes, kind=cnst, prop=no, path="EquivalenceInduction", ];
N: 27 "get_lem'" [body=yes, kind=cnst, prop=no, path="EquivalenceInduction", ];
N: 23 "idmap_respects_equivalenceL" [body=yes, kind=cnst, prop=no, path="EquivalenceInduction", ];
N: 22 "idmap_respects_equivalenceR" [body=yes, kind=cnst, prop=no, path="EquivalenceInduction", ];
N: 28 "make_respects_equivalence_db" [body=yes, kind=cnst, prop=no, path="EquivalenceInduction", ];
N: 19 "prod_respects_equivalenceL" [body=yes, kind=cnst, prop=no, path="EquivalenceInduction", ];
N: 18 "prod_respects_equivalenceR" [body=yes, kind=cnst, prop=no, path="EquivalenceInduction", ];
N: 32 "respects_equivalenceL" [body=yes, kind=cnst, prop=no, path="EquivalenceInduction", ];
N: 11 "respects_equivalenceL_equiv" [body=yes, kind=cnst, prop=no, path="EquivalenceInduction", ];
N: 9 "respects_equivalenceL_equiv'" [body=yes, kind=cnst, prop=no, path="EquivalenceInduction", ];
N: 30 "respects_equivalenceR" [body=yes, kind=cnst, prop=no, path="EquivalenceInduction", ];
N: 10 "respects_equivalenceR_equiv" [body=yes, kind=cnst, prop=no, path="EquivalenceInduction", ];
N: 8 "respects_equivalenceR_equiv'" [body=yes, kind=cnst, prop=no, path="EquivalenceInduction", ];
N: 29 "respects_equivalence_db" [body=yes, kind=cnst, prop=no, path="EquivalenceInduction", ];
N: 24 "respects_equivalence_db_instance_0" [body=yes, kind=cnst, prop=no, path="EquivalenceInduction", ];
N: 17 "respects_equivalence_db_instance_1" [body=yes, kind=cnst, prop=no, path="EquivalenceInduction", ];
N: 12 "respects_equivalence_db_instance_2" [body=yes, kind=cnst, prop=no, path="EquivalenceInduction", ];
N: 5 "respects_equivalence_db_instance_3" [body=yes, kind=cnst, prop=no, path="EquivalenceInduction", ];
N: 14 "sigma_respects_equivalenceL" [body=yes, kind=cnst, prop=no, path="EquivalenceInduction", ];
N: 13 "sigma_respects_equivalenceR" [body=yes, kind=cnst, prop=no, path="EquivalenceInduction", ];
N: 21 "unit_respects_equivalenceL" [body=yes, kind=cnst, prop=no, path="EquivalenceInduction", ];
N: 20 "unit_respects_equivalenceR" [body=yes, kind=cnst, prop=no, path="EquivalenceInduction", ];
E: 1 30 [weight=6, ];
E: 1 31 [weight=3, ];
E: 2 30 [weight=6, ];
E: 2 31 [weight=3, ];
E: 3 32 [weight=6, ];
E: 3 33 [weight=3, ];
E: 4 32 [weight=6, ];
E: 4 33 [weight=3, ];
E: 5 7 [weight=1, ];
E: 5 29 [weight=1, ];
E: 5 33 [weight=3, ];
E: 6 30 [weight=20, ];
E: 6 31 [weight=5, ];
E: 7 32 [weight=20, ];
E: 7 33 [weight=5, ];
E: 8 31 [weight=3, ];
E: 9 33 [weight=3, ];
E: 10 31 [weight=3, ];
E: 11 33 [weight=3, ];
E: 12 14 [weight=1, ];
E: 12 29 [weight=1, ];
E: 12 32 [weight=1, ];
E: 12 33 [weight=3, ];
E: 13 30 [weight=57, ];
E: 13 31 [weight=7, ];
E: 14 32 [weight=57, ];
E: 14 33 [weight=7, ];
E: 15 30 [weight=203, ];
E: 15 31 [weight=7, ];
E: 16 32 [weight=203, ];
E: 16 33 [weight=7, ];
E: 17 19 [weight=1, ];
E: 17 29 [weight=1, ];
E: 17 33 [weight=3, ];
E: 18 30 [weight=7, ];
E: 18 31 [weight=5, ];
E: 19 32 [weight=7, ];
E: 19 33 [weight=5, ];
E: 20 25 [weight=1, ];
E: 20 31 [weight=1, ];
E: 21 26 [weight=1, ];
E: 21 33 [weight=1, ];
E: 22 31 [weight=1, ];
E: 23 33 [weight=1, ];
E: 24 26 [weight=1, ];
E: 24 29 [weight=1, ];
E: 24 33 [weight=1, ];
E: 25 31 [weight=1, ];
E: 26 33 [weight=1, ];
E: 27 29 [weight=2, ];
E: 28 29 [weight=2, ];
E: 30 31 [weight=2, ];
E: 32 33 [weight=2, ];
