N: 12 "group_cancelL" [body=yes, kind=cnst, prop=no, path="groups", ];
N: 11 "group_cancelR" [body=yes, kind=cnst, prop=no, path="groups", ];
N: 15 "inverse_involutive" [body=yes, kind=cnst, prop=no, path="groups", ];
N: 13 "inverse_mon_unit" [body=yes, kind=cnst, prop=no, path="groups", ];
N: 10 "inverse_sg_op" [body=yes, kind=cnst, prop=no, path="groups", ];
N: 14 "isinj_group_inverse" [body=yes, kind=cnst, prop=no, path="groups", ];
N: 9 "negate_sg_op_distr" [body=yes, kind=cnst, prop=no, path="groups", ];
N: 8 "preserves_inverse" [body=yes, kind=cnst, prop=no, path="groups", ];
N: 1 "projected_ab_group" [body=yes, kind=cnst, prop=no, path="groups", ];
N: 3 "projected_com_monoid" [body=yes, kind=cnst, prop=no, path="groups", ];
N: 5 "projected_com_sg" [body=yes, kind=cnst, prop=no, path="groups", ];
N: 6 "projected_comm" [body=yes, kind=cnst, prop=no, path="groups", ];
N: 2 "projected_group" [body=yes, kind=cnst, prop=no, path="groups", ];
N: 4 "projected_monoid" [body=yes, kind=cnst, prop=no, path="groups", ];
N: 7 "projected_sg" [body=yes, kind=cnst, prop=no, path="groups", ];
E: 1 2 [weight=1, ];
E: 1 6 [weight=1, ];
E: 2 4 [weight=1, ];
E: 3 4 [weight=1, ];
E: 3 6 [weight=1, ];
E: 4 7 [weight=1, ];
E: 5 6 [weight=1, ];
E: 5 7 [weight=1, ];
E: 8 12 [weight=1, ];
E: 9 10 [weight=1, ];
E: 14 15 [weight=2, ];
