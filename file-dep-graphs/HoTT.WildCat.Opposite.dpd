N: 3 "hasmorext_op" [body=yes, kind=cnst, prop=no, path="Opposite", ];
N: 13 "is01cat_op" [body=yes, kind=cnst, prop=no, path="Opposite", ];
N: 7 "is0functor_op" [body=yes, kind=cnst, prop=no, path="Opposite", ];
N: 5 "is0functor_op'" [body=yes, kind=cnst, prop=no, path="Opposite", ];
N: 9 "is0gpd_op" [body=yes, kind=cnst, prop=no, path="Opposite", ];
N: 11 "is1cat_op" [body=yes, kind=cnst, prop=no, path="Opposite", ];
N: 10 "is1cat_strong_op" [body=yes, kind=cnst, prop=no, path="Opposite", ];
N: 6 "is1functor_op" [body=yes, kind=cnst, prop=no, path="Opposite", ];
N: 4 "is1functor_op'" [body=yes, kind=cnst, prop=no, path="Opposite", ];
N: 12 "is2graph_op" [body=yes, kind=cnst, prop=no, path="Opposite", ];
N: 14 "isgraph_op" [body=yes, kind=cnst, prop=no, path="Opposite", ];
N: 2 "isinitial_op_isterminal" [body=yes, kind=cnst, prop=no, path="Opposite", ];
N: 1 "isterminal_op_isinitial" [body=yes, kind=cnst, prop=no, path="Opposite", ];
N: 15 "op" [body=yes, kind=cnst, prop=no, path="Opposite", ];
N: 8 "op0gpd_fun" [body=yes, kind=cnst, prop=no, path="Opposite", ];
E: 1 11 [weight=1, ];
E: 1 12 [weight=1, ];
E: 1 13 [weight=1, ];
E: 1 14 [weight=1, ];
E: 1 15 [weight=1, ];
E: 2 11 [weight=1, ];
E: 2 12 [weight=1, ];
E: 2 13 [weight=1, ];
E: 2 14 [weight=1, ];
E: 2 15 [weight=1, ];
E: 3 11 [weight=3, ];
E: 3 12 [weight=3, ];
E: 3 13 [weight=3, ];
E: 3 14 [weight=3, ];
E: 3 15 [weight=2, ];
E: 4 5 [weight=1, ];
E: 4 6 [weight=1, ];
E: 4 11 [weight=6, ];
E: 4 12 [weight=6, ];
E: 4 13 [weight=6, ];
E: 4 14 [weight=10, ];
E: 4 15 [weight=22, ];
E: 5 7 [weight=1, ];
E: 5 14 [weight=6, ];
E: 5 15 [weight=14, ];
E: 6 7 [weight=8, ];
E: 6 11 [weight=12, ];
E: 6 12 [weight=8, ];
E: 6 13 [weight=8, ];
E: 6 14 [weight=16, ];
E: 6 15 [weight=16, ];
E: 7 14 [weight=6, ];
E: 7 15 [weight=8, ];
E: 8 14 [weight=3, ];
E: 8 15 [weight=9, ];
E: 9 13 [weight=2, ];
E: 9 14 [weight=4, ];
E: 9 15 [weight=4, ];
E: 10 12 [weight=9, ];
E: 10 13 [weight=16, ];
E: 10 14 [weight=32, ];
E: 10 15 [weight=35, ];
E: 11 12 [weight=25, ];
E: 11 13 [weight=16, ];
E: 11 14 [weight=60, ];
E: 11 15 [weight=75, ];
E: 12 14 [weight=2, ];
E: 12 15 [weight=2, ];
E: 13 14 [weight=6, ];
E: 13 15 [weight=6, ];
E: 14 15 [weight=4, ];
