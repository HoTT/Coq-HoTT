N: 34 "Colimit" [body=yes, kind=cnst, prop=no, path="Colimit", ];
N: 30 "Colimit_ind" [body=yes, kind=cnst, prop=no, path="Colimit", ];
N: 29 "Colimit_ind_beta_colimp" [body=yes, kind=cnst, prop=no, path="Colimit", ];
N: 28 "Colimit_rec" [body=yes, kind=cnst, prop=no, path="Colimit", ];
N: 27 "Colimit_rec_beta_colimp" [body=yes, kind=cnst, prop=no, path="Colimit", ];
N: 25 "Colimit_rec_homotopy" [body=yes, kind=cnst, prop=no, path="Colimit", ];
N: 24 "Colimit_rec_homotopy'" [body=yes, kind=cnst, prop=no, path="Colimit", ];
N: 40 "IsColimit_ind" [body=yes, kind=cnst, prop=yes, path="Colimit", ];
N: 39 "IsColimit_rec" [body=yes, kind=cnst, prop=no, path="Colimit", ];
N: 41 "IsColimit_rect" [body=yes, kind=cnst, prop=no, path="Colimit", ];
N: 38 "IsColimit_sind" [body=yes, kind=cnst, prop=no, path="Colimit", ];
N: 31 "ap_colim_homotopic" [body=yes, kind=cnst, prop=no, path="Colimit", ];
N: 26 "cocone_colimit" [body=yes, kind=cnst, prop=no, path="Colimit", ];
N: 35 "cocone_postcompose_inv" [body=yes, kind=cnst, prop=no, path="Colimit", ];
N: 9 "cocone_precompose_postcompose_comp" [body=yes, kind=cnst, prop=no, path="Colimit", ];
N: 33 "colim" [body=yes, kind=cnst, prop=no, path="Colimit", ];
N: 1 "colimit_adjoint" [body=yes, kind=cnst, prop=no, path="Colimit", ];
N: 2 "colimit_unicity" [body=yes, kind=cnst, prop=no, path="Colimit", ];
N: 32 "colimp" [body=yes, kind=cnst, prop=no, path="Colimit", ];
N: 22 "equiv_colimit_rec" [body=yes, kind=cnst, prop=no, path="Colimit", ];
N: 3 "equiv_functor_colimit" [body=yes, kind=cnst, prop=no, path="Colimit", ];
N: 16 "functor_Colimit" [body=yes, kind=cnst, prop=no, path="Colimit", ];
N: 19 "functor_Colimit_half" [body=yes, kind=cnst, prop=no, path="Colimit", ];
N: 18 "functor_Colimit_half_beta_colimp" [body=yes, kind=cnst, prop=no, path="Colimit", ];
N: 14 "functor_Colimit_half_compose" [body=yes, kind=cnst, prop=no, path="Colimit", ];
N: 17 "functor_Colimit_half_homotopy" [body=yes, kind=cnst, prop=no, path="Colimit", ];
N: 15 "functor_Colimit_homotopy" [body=yes, kind=cnst, prop=no, path="Colimit", ];
N: 11 "functor_colimit" [body=yes, kind=cnst, prop=no, path="Colimit", ];
N: 10 "functor_colimit_commute" [body=yes, kind=cnst, prop=no, path="Colimit", ];
N: 7 "functor_colimit_compose" [body=yes, kind=cnst, prop=no, path="Colimit", ];
N: 5 "functor_colimit_eisretr" [body=yes, kind=cnst, prop=no, path="Colimit", ];
N: 6 "functor_colimit_eissect" [body=yes, kind=cnst, prop=no, path="Colimit", ];
N: 37 "iscolimit_cocone" [body=yes, kind=cnst, prop=no, path="Colimit", ];
N: 20 "iscolimit_colimit" [body=yes, kind=cnst, prop=no, path="Colimit", ];
N: 12 "iscolimit_postcompose_equiv" [body=yes, kind=cnst, prop=no, path="Colimit", ];
N: 13 "iscolimit_precompose_equiv" [body=yes, kind=cnst, prop=no, path="Colimit", ];
N: 36 "iscolimit_unicocone" [body=yes, kind=cnst, prop=no, path="Colimit", ];
N: 23 "isequiv_colimit_rec" [body=yes, kind=cnst, prop=no, path="Colimit", ];
N: 4 "isequiv_functor_colimit" [body=yes, kind=cnst, prop=no, path="Colimit", ];
N: 8 "postcompose_functor_colimit_compose" [body=yes, kind=cnst, prop=no, path="Colimit", ];
N: 21 "unicocone_colimit" [body=yes, kind=cnst, prop=no, path="Colimit", ];
N: 43 "IsColimit" [kind=inductive, prop=no, path="Colimit", ];
N: 42 "Build_IsColimit" [kind=construct, prop=no, path="Colimit", ];
E: 1 22 [weight=1, ];
E: 1 34 [weight=3, ];
E: 2 3 [weight=1, ];
E: 2 43 [weight=4, ];
E: 3 4 [weight=1, ];
E: 3 11 [weight=1, ];
E: 3 43 [weight=4, ];
E: 4 5 [weight=1, ];
E: 4 6 [weight=1, ];
E: 4 11 [weight=3, ];
E: 4 43 [weight=4, ];
E: 5 11 [weight=18, ];
E: 5 43 [weight=4, ];
E: 6 11 [weight=18, ];
E: 6 43 [weight=4, ];
E: 7 8 [weight=1, ];
E: 7 11 [weight=6, ];
E: 7 43 [weight=6, ];
E: 8 9 [weight=1, ];
E: 8 10 [weight=2, ];
E: 8 11 [weight=13, ];
E: 8 43 [weight=6, ];
E: 9 10 [weight=1, ];
E: 9 11 [weight=7, ];
E: 9 43 [weight=4, ];
E: 10 11 [weight=1, ];
E: 10 43 [weight=4, ];
E: 11 35 [weight=1, ];
E: 11 43 [weight=4, ];
E: 12 42 [weight=1, ];
E: 12 43 [weight=3, ];
E: 13 42 [weight=1, ];
E: 13 43 [weight=3, ];
E: 14 16 [weight=98, ];
E: 14 18 [weight=1, ];
E: 14 19 [weight=113, ];
E: 14 25 [weight=1, ];
E: 14 26 [weight=39, ];
E: 14 27 [weight=1, ];
E: 14 28 [weight=4, ];
E: 14 32 [weight=14, ];
E: 14 33 [weight=145, ];
E: 14 34 [weight=148, ];
E: 15 16 [weight=2, ];
E: 15 17 [weight=1, ];
E: 15 26 [weight=1, ];
E: 15 34 [weight=4, ];
E: 16 19 [weight=1, ];
E: 16 26 [weight=1, ];
E: 16 34 [weight=3, ];
E: 17 19 [weight=2, ];
E: 17 24 [weight=1, ];
E: 17 34 [weight=2, ];
E: 18 19 [weight=3, ];
E: 18 27 [weight=1, ];
E: 18 32 [weight=1, ];
E: 18 33 [weight=4, ];
E: 18 34 [weight=1, ];
E: 19 28 [weight=1, ];
E: 19 34 [weight=1, ];
E: 20 21 [weight=1, ];
E: 20 26 [weight=1, ];
E: 20 34 [weight=2, ];
E: 20 42 [weight=1, ];
E: 20 43 [weight=1, ];
E: 21 22 [weight=2, ];
E: 21 26 [weight=2, ];
E: 21 34 [weight=3, ];
E: 22 23 [weight=1, ];
E: 22 28 [weight=1, ];
E: 22 34 [weight=2, ];
E: 23 25 [weight=1, ];
E: 23 26 [weight=16, ];
E: 23 27 [weight=1, ];
E: 23 28 [weight=21, ];
E: 23 32 [weight=5, ];
E: 23 33 [weight=26, ];
E: 23 34 [weight=35, ];
E: 24 25 [weight=1, ];
E: 24 27 [weight=1, ];
E: 24 28 [weight=20, ];
E: 24 32 [weight=3, ];
E: 24 33 [weight=20, ];
E: 24 34 [weight=5, ];
E: 25 27 [weight=1, ];
E: 25 28 [weight=30, ];
E: 25 30 [weight=1, ];
E: 25 32 [weight=12, ];
E: 25 33 [weight=68, ];
E: 25 34 [weight=33, ];
E: 26 32 [weight=1, ];
E: 26 33 [weight=1, ];
E: 26 34 [weight=2, ];
E: 27 28 [weight=12, ];
E: 27 29 [weight=1, ];
E: 27 30 [weight=17, ];
E: 27 32 [weight=53, ];
E: 27 33 [weight=130, ];
E: 27 34 [weight=99, ];
E: 28 30 [weight=1, ];
E: 28 32 [weight=2, ];
E: 28 33 [weight=4, ];
E: 28 34 [weight=5, ];
E: 29 30 [weight=42, ];
E: 29 32 [weight=4, ];
E: 29 33 [weight=110, ];
E: 29 34 [weight=31, ];
E: 30 32 [weight=2, ];
E: 30 33 [weight=8, ];
E: 30 34 [weight=5, ];
E: 31 32 [weight=5, ];
E: 31 33 [weight=32, ];
E: 31 34 [weight=24, ];
E: 32 33 [weight=2, ];
E: 32 34 [weight=1, ];
E: 33 34 [weight=1, ];
E: 35 43 [weight=2, ];
E: 36 43 [weight=2, ];
E: 37 43 [weight=2, ];
E: 38 42 [weight=2, ];
E: 38 43 [weight=4, ];
E: 39 41 [weight=1, ];
E: 39 42 [weight=1, ];
E: 39 43 [weight=3, ];
E: 40 42 [weight=2, ];
E: 40 43 [weight=4, ];
E: 41 42 [weight=2, ];
E: 41 43 [weight=4, ];
