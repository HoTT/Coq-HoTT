N: 25 "IsSurjInj_ind" [body=yes, kind=cnst, prop=yes, path="EquivGpd", ];
N: 24 "IsSurjInj_rec" [body=yes, kind=cnst, prop=no, path="EquivGpd", ];
N: 26 "IsSurjInj_rect" [body=yes, kind=cnst, prop=no, path="EquivGpd", ];
N: 23 "IsSurjInj_sind" [body=yes, kind=cnst, prop=no, path="EquivGpd", ];
N: 30 "SplEssSurj" [body=yes, kind=cnst, prop=no, path="EquivGpd", ];
N: 12 "cancelL_isesssurj" [body=yes, kind=cnst, prop=no, path="EquivGpd", ];
N: 10 "cancelL_issurjinj" [body=yes, kind=cnst, prop=no, path="EquivGpd", ];
N: 8 "cancelR_isesssurj" [body=yes, kind=cnst, prop=no, path="EquivGpd", ];
N: 6 "cancelR_issurjinj" [body=yes, kind=cnst, prop=no, path="EquivGpd", ];
N: 18 "eisretr0gpd_inv" [body=yes, kind=cnst, prop=no, path="EquivGpd", ];
N: 17 "eissect0gpd_inv" [body=yes, kind=cnst, prop=no, path="EquivGpd", ];
N: 21 "essinj" [body=yes, kind=cnst, prop=no, path="EquivGpd", ];
N: 29 "esssurj" [body=yes, kind=cnst, prop=no, path="EquivGpd", ];
N: 22 "esssurj_issurjinj" [body=yes, kind=cnst, prop=no, path="EquivGpd", ];
N: 11 "iffL_isesssurj" [body=yes, kind=cnst, prop=no, path="EquivGpd", ];
N: 9 "iffL_issurjinj" [body=yes, kind=cnst, prop=no, path="EquivGpd", ];
N: 7 "iffR_isesssurj" [body=yes, kind=cnst, prop=no, path="EquivGpd", ];
N: 5 "iffR_issurjinj" [body=yes, kind=cnst, prop=no, path="EquivGpd", ];
N: 19 "is0functor_surjinj_inv" [body=yes, kind=cnst, prop=no, path="EquivGpd", ];
N: 14 "isesssurj_compose" [body=yes, kind=cnst, prop=no, path="EquivGpd", ];
N: 4 "isesssurj_iff_commsq" [body=yes, kind=cnst, prop=no, path="EquivGpd", ];
N: 2 "isesssurj_iff_sigma" [body=yes, kind=cnst, prop=no, path="EquivGpd", ];
N: 16 "isesssurj_transf" [body=yes, kind=cnst, prop=no, path="EquivGpd", ];
N: 13 "issurjinj_compose" [body=yes, kind=cnst, prop=no, path="EquivGpd", ];
N: 3 "issurjinj_iff_commsq" [body=yes, kind=cnst, prop=no, path="EquivGpd", ];
N: 1 "issurjinj_sigma" [body=yes, kind=cnst, prop=no, path="EquivGpd", ];
N: 15 "issurjinj_transf" [body=yes, kind=cnst, prop=no, path="EquivGpd", ];
N: 20 "surjinj_inv" [body=yes, kind=cnst, prop=no, path="EquivGpd", ];
N: 28 "IsSurjInj" [kind=inductive, prop=no, path="EquivGpd", ];
N: 27 "Build_IsSurjInj" [kind=construct, prop=no, path="EquivGpd", ];
E: 1 2 [weight=1, ];
E: 1 27 [weight=1, ];
E: 1 28 [weight=3, ];
E: 1 30 [weight=2, ];
E: 2 29 [weight=7, ];
E: 2 30 [weight=10, ];
E: 3 6 [weight=1, ];
E: 3 10 [weight=1, ];
E: 3 13 [weight=2, ];
E: 3 15 [weight=2, ];
E: 3 28 [weight=12, ];
E: 4 8 [weight=1, ];
E: 4 12 [weight=1, ];
E: 4 14 [weight=2, ];
E: 4 16 [weight=2, ];
E: 4 28 [weight=4, ];
E: 4 30 [weight=8, ];
E: 5 6 [weight=1, ];
E: 5 13 [weight=1, ];
E: 5 28 [weight=9, ];
E: 6 8 [weight=1, ];
E: 6 27 [weight=1, ];
E: 6 28 [weight=5, ];
E: 6 29 [weight=18, ];
E: 7 8 [weight=1, ];
E: 7 14 [weight=1, ];
E: 7 30 [weight=9, ];
E: 8 29 [weight=2, ];
E: 8 30 [weight=4, ];
E: 9 10 [weight=1, ];
E: 9 13 [weight=1, ];
E: 9 28 [weight=8, ];
E: 10 12 [weight=1, ];
E: 10 27 [weight=1, ];
E: 10 28 [weight=5, ];
E: 11 12 [weight=1, ];
E: 11 14 [weight=1, ];
E: 11 28 [weight=2, ];
E: 11 30 [weight=6, ];
E: 12 28 [weight=2, ];
E: 12 29 [weight=3, ];
E: 12 30 [weight=4, ];
E: 13 14 [weight=1, ];
E: 13 27 [weight=1, ];
E: 13 28 [weight=5, ];
E: 14 29 [weight=12, ];
E: 14 30 [weight=6, ];
E: 15 16 [weight=1, ];
E: 15 27 [weight=1, ];
E: 15 28 [weight=3, ];
E: 16 29 [weight=5, ];
E: 16 30 [weight=4, ];
E: 17 18 [weight=1, ];
E: 17 20 [weight=3, ];
E: 17 28 [weight=2, ];
E: 18 20 [weight=2, ];
E: 18 28 [weight=2, ];
E: 18 29 [weight=1, ];
E: 19 20 [weight=4, ];
E: 19 28 [weight=2, ];
E: 19 29 [weight=12, ];
E: 20 28 [weight=2, ];
E: 20 29 [weight=1, ];
E: 21 28 [weight=2, ];
E: 22 28 [weight=2, ];
E: 22 30 [weight=1, ];
E: 23 27 [weight=2, ];
E: 23 28 [weight=4, ];
E: 23 30 [weight=2, ];
E: 24 26 [weight=1, ];
E: 24 27 [weight=1, ];
E: 24 28 [weight=3, ];
E: 24 30 [weight=1, ];
E: 25 27 [weight=2, ];
E: 25 28 [weight=4, ];
E: 25 30 [weight=2, ];
E: 26 27 [weight=2, ];
E: 26 28 [weight=4, ];
E: 26 30 [weight=2, ];
E: 27 30 [weight=1, ];
E: 28 30 [weight=1, ];
E: 29 30 [weight=2, ];
