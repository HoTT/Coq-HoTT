N: 25 "abses_baer_sum" [body=yes, kind=cnst, prop=no, path="BaerSum", ];
N: 23 "abses_pushout_is_pullback" [body=yes, kind=cnst, prop=no, path="BaerSum", ];
N: 24 "abses_pushout_is_pullback'" [body=yes, kind=cnst, prop=no, path="BaerSum", ];
N: 21 "abses_pushout_pullback_reorder" [body=yes, kind=cnst, prop=no, path="BaerSum", ];
N: 22 "abses_pushout_pullback_reorder'" [body=yes, kind=cnst, prop=no, path="BaerSum", ];
N: 18 "abses_reorder_pullback_pushout" [body=yes, kind=cnst, prop=no, path="BaerSum", ];
N: 10 "abses_trinary_baer_sum" [body=yes, kind=cnst, prop=no, path="BaerSum", ];
N: 6 "baer_sum_associative" [body=yes, kind=cnst, prop=no, path="BaerSum", ];
N: 16 "baer_sum_commutative" [body=yes, kind=cnst, prop=no, path="BaerSum", ];
N: 17 "baer_sum_distributive_pullbacks" [body=yes, kind=cnst, prop=no, path="BaerSum", ];
N: 11 "baer_sum_distributive_pushouts" [body=yes, kind=cnst, prop=no, path="BaerSum", ];
N: 13 "baer_sum_inverse_l" [body=yes, kind=cnst, prop=no, path="BaerSum", ];
N: 12 "baer_sum_inverse_r" [body=yes, kind=cnst, prop=no, path="BaerSum", ];
N: 9 "baer_sum_is_trinary" [body=yes, kind=cnst, prop=no, path="BaerSum", ];
N: 1 "baer_sum_pullback" [body=yes, kind=cnst, prop=no, path="BaerSum", ];
N: 2 "baer_sum_pushout" [body=yes, kind=cnst, prop=no, path="BaerSum", ];
N: 7 "baer_sum_twist" [body=yes, kind=cnst, prop=no, path="BaerSum", ];
N: 14 "baer_sum_unit_l" [body=yes, kind=cnst, prop=no, path="BaerSum", ];
N: 15 "baer_sum_unit_r" [body=yes, kind=cnst, prop=no, path="BaerSum", ];
N: 4 "is0bifunctor_abses" [body=yes, kind=cnst, prop=no, path="BaerSum", ];
N: 20 "is0bifunctor_abses'" [body=yes, kind=cnst, prop=no, path="BaerSum", ];
N: 3 "is1bifunctor_abses" [body=yes, kind=cnst, prop=no, path="BaerSum", ];
N: 19 "is1bifunctor_abses'" [body=yes, kind=cnst, prop=no, path="BaerSum", ];
N: 5 "ishspace_abses" [body=yes, kind=cnst, prop=no, path="BaerSum", ];
N: 8 "twist_trinary_baer_sum" [body=yes, kind=cnst, prop=no, path="BaerSum", ];
E: 1 21 [weight=2, ];
E: 1 25 [weight=4, ];
E: 2 21 [weight=1, ];
E: 2 25 [weight=4, ];
E: 3 4 [weight=1, ];
E: 3 5 [weight=1, ];
E: 3 21 [weight=1, ];
E: 5 14 [weight=1, ];
E: 5 15 [weight=1, ];
E: 5 25 [weight=3, ];
E: 6 7 [weight=1, ];
E: 6 16 [weight=2, ];
E: 6 25 [weight=24, ];
E: 7 8 [weight=1, ];
E: 7 9 [weight=2, ];
E: 7 10 [weight=4, ];
E: 7 25 [weight=12, ];
E: 8 10 [weight=4, ];
E: 8 21 [weight=1, ];
E: 8 23 [weight=1, ];
E: 9 10 [weight=2, ];
E: 9 21 [weight=1, ];
E: 9 25 [weight=4, ];
E: 11 21 [weight=2, ];
E: 11 23 [weight=1, ];
E: 11 25 [weight=2, ];
E: 12 13 [weight=1, ];
E: 12 16 [weight=1, ];
E: 12 25 [weight=3, ];
E: 13 17 [weight=1, ];
E: 13 25 [weight=6, ];
E: 14 15 [weight=1, ];
E: 14 16 [weight=1, ];
E: 14 25 [weight=3, ];
E: 15 17 [weight=1, ];
E: 15 25 [weight=9, ];
E: 16 21 [weight=1, ];
E: 16 23 [weight=1, ];
E: 16 25 [weight=4, ];
E: 17 18 [weight=2, ];
E: 17 23 [weight=1, ];
E: 17 25 [weight=2, ];
E: 18 23 [weight=1, ];
E: 19 20 [weight=1, ];
E: 19 21 [weight=1, ];
E: 21 22 [weight=1, ];
E: 22 24 [weight=1, ];
E: 23 24 [weight=1, ];
