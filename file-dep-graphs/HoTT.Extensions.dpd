N: 58 "ExtendableAlong" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 63 "ExtensionAlong" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 13 "HomotopyExtendableAlong" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 14 "HomotopyExtensionAlong" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 48 "cancelL_extendable" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 33 "cancelL_ooextendable" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 47 "cancelR_extendable" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 32 "cancelR_ooextendable" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 25 "cyl_extendable" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 22 "cyl_extendable'" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 26 "cyl_extension" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 23 "cyl_extension'" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 24 "cyl_ooextendable" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 21 "cyl_ooextendable'" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 53 "equiv_extendable_isequiv" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 56 "equiv_extendable_pathsplit" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 37 "equiv_ooextendable_isequiv" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 39 "equiv_ooextendable_pathsplit" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 61 "equiv_path_extension" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 49 "extendable_compose" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 44 "extendable_contr" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 45 "extendable_equiv" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 4 "extendable_functor_coeq" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 2 "extendable_functor_coeq'" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 19 "extendable_functor_prod" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 10 "extendable_functor_sigma" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 16 "extendable_functor_sigma_id" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 7 "extendable_functor_sum" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 46 "extendable_homotopic" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 43 "extendable_homotopy" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 50 "extendable_postcompose" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 51 "extendable_postcompose'" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 5 "extension_functor_coeq" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 20 "extension_functor_prod" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 11 "extension_functor_sigma" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 17 "extension_functor_sigma_id" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 8 "extension_functor_sum" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 52 "extension_isequiv_precompose" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 55 "isequiv_extendable" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 40 "isequiv_ooextendable" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 59 "isequiv_path_extension" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 54 "ishprop_extendable" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 38 "ishprop_ooextendable" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 57 "lift_extendablealong" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 62 "lift_extensionalong" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 41 "lift_ooextendablealong" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 42 "ooExtendableAlong" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 12 "ooHomotopyExtendableAlong" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 34 "ooextendable_compose" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 29 "ooextendable_contr" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 30 "ooextendable_equiv" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 3 "ooextendable_functor_coeq" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 1 "ooextendable_functor_coeq'" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 18 "ooextendable_functor_prod" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 9 "ooextendable_functor_sigma" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 15 "ooextendable_functor_sigma_id" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 6 "ooextendable_functor_sum" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 31 "ooextendable_homotopic" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 28 "ooextendable_homotopy" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 27 "ooextendable_isnull_fibers" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 36 "ooextendable_postcompose" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 35 "ooextendable_postcompose'" [body=yes, kind=cnst, prop=no, path="Extensions", ];
N: 60 "path_extension" [body=yes, kind=cnst, prop=no, path="Extensions", ];
E: 1 2 [weight=1, ];
E: 1 42 [weight=5, ];
E: 2 4 [weight=1, ];
E: 2 58 [weight=5, ];
E: 3 4 [weight=1, ];
E: 3 42 [weight=5, ];
E: 4 5 [weight=1, ];
E: 4 58 [weight=19, ];
E: 4 63 [weight=3, ];
E: 5 22 [weight=1, ];
E: 5 25 [weight=1, ];
E: 5 45 [weight=2, ];
E: 5 48 [weight=1, ];
E: 5 51 [weight=1, ];
E: 5 58 [weight=5, ];
E: 5 63 [weight=3, ];
E: 6 7 [weight=1, ];
E: 6 42 [weight=6, ];
E: 7 8 [weight=1, ];
E: 7 58 [weight=16, ];
E: 7 63 [weight=3, ];
E: 8 58 [weight=4, ];
E: 8 63 [weight=1, ];
E: 9 10 [weight=1, ];
E: 9 12 [weight=2, ];
E: 9 42 [weight=3, ];
E: 10 11 [weight=1, ];
E: 10 13 [weight=7, ];
E: 10 14 [weight=1, ];
E: 10 58 [weight=12, ];
E: 10 63 [weight=2, ];
E: 11 13 [weight=2, ];
E: 11 58 [weight=2, ];
E: 11 63 [weight=1, ];
E: 12 13 [weight=1, ];
E: 13 14 [weight=1, ];
E: 15 16 [weight=1, ];
E: 15 42 [weight=3, ];
E: 16 17 [weight=1, ];
E: 16 58 [weight=12, ];
E: 16 63 [weight=2, ];
E: 17 58 [weight=2, ];
E: 17 63 [weight=1, ];
E: 18 19 [weight=1, ];
E: 18 42 [weight=5, ];
E: 19 20 [weight=1, ];
E: 19 58 [weight=19, ];
E: 19 63 [weight=3, ];
E: 20 58 [weight=4, ];
E: 20 63 [weight=1, ];
E: 21 22 [weight=1, ];
E: 21 42 [weight=3, ];
E: 22 25 [weight=1, ];
E: 22 45 [weight=1, ];
E: 22 48 [weight=1, ];
E: 22 58 [weight=3, ];
E: 23 26 [weight=1, ];
E: 23 63 [weight=3, ];
E: 24 25 [weight=1, ];
E: 24 42 [weight=3, ];
E: 25 26 [weight=1, ];
E: 25 58 [weight=12, ];
E: 25 63 [weight=1, ];
E: 26 63 [weight=3, ];
E: 27 28 [weight=1, ];
E: 27 42 [weight=8, ];
E: 27 58 [weight=3, ];
E: 27 63 [weight=1, ];
E: 28 42 [weight=4, ];
E: 28 43 [weight=1, ];
E: 29 42 [weight=1, ];
E: 29 44 [weight=1, ];
E: 30 42 [weight=1, ];
E: 30 45 [weight=1, ];
E: 31 42 [weight=3, ];
E: 31 46 [weight=1, ];
E: 32 42 [weight=5, ];
E: 32 47 [weight=1, ];
E: 33 42 [weight=5, ];
E: 33 48 [weight=1, ];
E: 34 42 [weight=5, ];
E: 34 49 [weight=1, ];
E: 35 42 [weight=3, ];
E: 35 51 [weight=1, ];
E: 36 42 [weight=3, ];
E: 36 50 [weight=1, ];
E: 37 39 [weight=1, ];
E: 37 42 [weight=2, ];
E: 38 39 [weight=1, ];
E: 38 42 [weight=3, ];
E: 39 42 [weight=1, ];
E: 39 56 [weight=1, ];
E: 39 58 [weight=1, ];
E: 40 42 [weight=2, ];
E: 40 55 [weight=1, ];
E: 40 63 [weight=2, ];
E: 41 42 [weight=3, ];
E: 41 57 [weight=1, ];
E: 42 58 [weight=1, ];
E: 43 58 [weight=11, ];
E: 43 63 [weight=2, ];
E: 44 58 [weight=5, ];
E: 44 63 [weight=1, ];
E: 45 58 [weight=5, ];
E: 45 63 [weight=1, ];
E: 46 58 [weight=11, ];
E: 46 63 [weight=1, ];
E: 47 58 [weight=17, ];
E: 47 63 [weight=1, ];
E: 48 51 [weight=1, ];
E: 48 58 [weight=17, ];
E: 48 63 [weight=1, ];
E: 49 58 [weight=17, ];
E: 49 63 [weight=1, ];
E: 50 51 [weight=1, ];
E: 50 58 [weight=2, ];
E: 51 58 [weight=22, ];
E: 51 63 [weight=6, ];
E: 52 63 [weight=1, ];
E: 53 56 [weight=1, ];
E: 53 58 [weight=2, ];
E: 54 56 [weight=1, ];
E: 54 58 [weight=3, ];
E: 55 56 [weight=1, ];
E: 55 58 [weight=3, ];
E: 56 58 [weight=6, ];
E: 56 63 [weight=9, ];
E: 57 58 [weight=11, ];
E: 57 62 [weight=1, ];
E: 57 63 [weight=1, ];
E: 58 63 [weight=1, ];
E: 59 60 [weight=1, ];
E: 59 61 [weight=1, ];
E: 59 63 [weight=6, ];
E: 60 61 [weight=1, ];
E: 60 63 [weight=6, ];
E: 61 63 [weight=14, ];
E: 62 63 [weight=3, ];
