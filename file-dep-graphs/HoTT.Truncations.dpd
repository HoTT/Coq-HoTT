N: 24 "BuildIsSurjection" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 68 "ConditionallyConstant" [body=yes, kind=cnst, prop=no, path="Constant", ];
N: 73 "FixedBy" [body=yes, kind=cnst, prop=no, path="Constant", ];
N: 10 "O_eq_Tr" [body=yes, kind=cnst, prop=no, path="SeparatedTrunc", ];
N: 9 "O_leq_Tr" [body=yes, kind=cnst, prop=no, path="SeparatedTrunc", ];
N: 13 "O_leq_Tr_leq" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 7 "O_lex_leq_Tr" [body=yes, kind=cnst, prop=no, path="SeparatedTrunc", ];
N: 8 "O_strong_leq_Tr" [body=yes, kind=cnst, prop=no, path="SeparatedTrunc", ];
N: 49 "Tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 44 "Trunc_functor" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 40 "Trunc_functor_compose" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 41 "Trunc_functor_equiv" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 39 "Trunc_functor_idmap" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 42 "Trunc_functor_isequiv" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 1 "Trunc_ind" [body=yes, kind=cnst, prop=no, path="Core.Trunc", ];
N: 12 "Trunc_min" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 51 "Trunc_rec" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 50 "Trunc_rec_tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 11 "Trunc_swap" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 15 "ap_paths_inverse" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 21 "cancelR_issurjection" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 67 "cconst_const" [body=yes, kind=cnst, prop=no, path="Constant", ];
N: 64 "cconst_factors_contr" [body=yes, kind=cnst, prop=no, path="Constant", ];
N: 65 "cconst_factors_hprop" [body=yes, kind=cnst, prop=no, path="Constant", ];
N: 63 "cconst_wconst_collapsible" [body=yes, kind=cnst, prop=no, path="Constant", ];
N: 60 "cconst_wconst_hset" [body=yes, kind=cnst, prop=no, path="Constant", ];
N: 57 "cconst_wconst_hset_if_domain" [body=yes, kind=cnst, prop=no, path="Constant", ];
N: 61 "cconst_wconst_hset_if_merely_domain" [body=yes, kind=cnst, prop=no, path="Constant", ];
N: 69 "collapsible_splitsupp" [body=yes, kind=cnst, prop=no, path="Constant", ];
N: 98 "conn_point_elim" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 97 "conn_point_elim_comp" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 99 "conn_point_incl" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 100 "conn_pointed_type" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 19 "contr_hfiber_emb" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 29 "contr_tr_minus_two" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 30 "decidable_trunc_decidable" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 38 "equiv_Trunc_prod_cmp" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 66 "equiv_cconst_from_merely" [body=yes, kind=cnst, prop=no, path="Constant", ];
N: 82 "equiv_component_image_unit" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 71 "equiv_fix_merely" [body=yes, kind=cnst, prop=no, path="Constant", ];
N: 22 "equiv_merely_issurjection" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 55 "equiv_merely_rec_hset_if_domain" [body=yes, kind=cnst, prop=no, path="Constant", ];
N: 5 "equiv_path_Tr" [body=yes, kind=cnst, prop=no, path="SeparatedTrunc", ];
N: 46 "equiv_tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 27 "hexists" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 25 "himage" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 26 "hor" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 62 "hprop_image_wconst_hset_if_merely_domain" [body=yes, kind=cnst, prop=no, path="Constant", ];
N: 23 "iff_merely_issurjection" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 36 "inO_tr_istrunc" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 81 "indecomposable_0connected" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 84 "is0connected_component" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 91 "is0connected_isconnected" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 85 "is0connected_merely_allpath" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 43 "is0functor_Tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 37 "is1functor_Tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 79 "isconn_wedge_incl" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 102 "isconnected_isconnected_allpath" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 88 "isconnected_minus_two" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 104 "isconnected_paths" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 96 "isconnected_pred" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 95 "isconnected_pred'" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 94 "isconnected_pred_add" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 93 "isconnected_pred_add'" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 80 "isconnected_trunc" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 103 "isconnmap_ap_isconnmap" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 101 "isconnmap_isconnmap_ap_surj" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 87 "isconnmap_minus_two" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 90 "isconnmap_pred'" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 89 "isconnmap_pred_add" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 14 "isembedding_paths" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 16 "isembedding_precompose_surjection_hset" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 17 "isequiv_isequiv_compose_embedding" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 18 "isequiv_surj_emb" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 47 "isequiv_tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 72 "ishprop_fix_wconst" [body=yes, kind=cnst, prop=no, path="Constant", ];
N: 20 "issurj_retr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 105 "istrunc_extension_along_conn" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 35 "istrunc_inO_tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 2 "istrunc_truncation" [body=no, kind=cnst, prop=no, path="Core.Trunc", ];
N: 33 "istruncmap_mapinO_tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 34 "mapinO_tr_istruncmap" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 28 "merely" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 31 "merely_inhabited_iff_inhabited_stable" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 92 "merely_isconnected" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 83 "merely_path_component" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 86 "merely_path_is0connected" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 59 "merely_rec_hset" [body=yes, kind=cnst, prop=no, path="Constant", ];
N: 58 "merely_rec_hset_beta" [body=yes, kind=cnst, prop=no, path="Constant", ];
N: 56 "merely_rec_hset_if_domain" [body=yes, kind=cnst, prop=no, path="Constant", ];
N: 6 "path_Tr" [body=yes, kind=cnst, prop=no, path="SeparatedTrunc", ];
N: 70 "splitsupp_collapsible" [body=yes, kind=cnst, prop=no, path="Constant", ];
N: 53 "surjective_factor" [body=yes, kind=cnst, prop=no, path="Constant", ];
N: 54 "surjective_factor_aux" [body=yes, kind=cnst, prop=no, path="Constant", ];
N: 52 "surjective_factor_factors" [body=yes, kind=cnst, prop=no, path="Constant", ];
N: 48 "trunc_iff_isequiv_truncation" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 32 "trunc_inhabited_iff_inhabited_stable" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 45 "untrunc_istrunc" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 77 "wedge_incl_comp1" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 76 "wedge_incl_comp2" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 75 "wedge_incl_comp3" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 78 "wedge_incl_elim" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 74 "wedge_incl_elim_uncurried" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 4 "Trunc" [kind=inductive, prop=no, path="Core.Trunc", ];
N: 3 "tr" [kind=construct, prop=no, path="Core.Trunc", ];
E: 1 3 [weight=2, ];
E: 1 4 [weight=9, ];
E: 2 4 [weight=1, ];
E: 5 3 [weight=2, ];
E: 5 7 [weight=1, ];
E: 5 8 [weight=1, ];
E: 5 10 [weight=1, ];
E: 5 49 [weight=4, ];
E: 6 3 [weight=2, ];
E: 6 10 [weight=1, ];
E: 6 49 [weight=4, ];
E: 7 8 [weight=3, ];
E: 7 35 [weight=6, ];
E: 7 49 [weight=20, ];
E: 7 51 [weight=4, ];
E: 8 9 [weight=1, ];
E: 8 49 [weight=6, ];
E: 9 35 [weight=1, ];
E: 9 36 [weight=1, ];
E: 9 49 [weight=5, ];
E: 10 35 [weight=2, ];
E: 10 36 [weight=1, ];
E: 10 49 [weight=11, ];
E: 11 12 [weight=2, ];
E: 11 49 [weight=17, ];
E: 12 2 [weight=1, ];
E: 12 3 [weight=3, ];
E: 12 4 [weight=4, ];
E: 12 13 [weight=1, ];
E: 12 44 [weight=1, ];
E: 12 46 [weight=1, ];
E: 12 49 [weight=20, ];
E: 13 49 [weight=4, ];
E: 14 15 [weight=7, ];
E: 14 17 [weight=1, ];
E: 14 49 [weight=5, ];
E: 16 36 [weight=1, ];
E: 16 49 [weight=3, ];
E: 17 18 [weight=1, ];
E: 17 21 [weight=1, ];
E: 17 49 [weight=1, ];
E: 18 49 [weight=3, ];
E: 20 2 [weight=1, ];
E: 20 3 [weight=1, ];
E: 20 49 [weight=3, ];
E: 21 2 [weight=1, ];
E: 21 44 [weight=1, ];
E: 21 49 [weight=6, ];
E: 22 2 [weight=1, ];
E: 22 23 [weight=1, ];
E: 22 28 [weight=3, ];
E: 22 49 [weight=3, ];
E: 23 2 [weight=1, ];
E: 23 28 [weight=4, ];
E: 23 49 [weight=7, ];
E: 24 2 [weight=1, ];
E: 24 28 [weight=2, ];
E: 24 49 [weight=3, ];
E: 25 49 [weight=3, ];
E: 26 28 [weight=1, ];
E: 27 28 [weight=1, ];
E: 28 2 [weight=1, ];
E: 28 49 [weight=1, ];
E: 29 35 [weight=1, ];
E: 29 36 [weight=4, ];
E: 29 49 [weight=20, ];
E: 30 32 [weight=1, ];
E: 30 49 [weight=3, ];
E: 31 32 [weight=1, ];
E: 31 49 [weight=1, ];
E: 32 1 [weight=1, ];
E: 32 3 [weight=1, ];
E: 32 4 [weight=3, ];
E: 32 49 [weight=3, ];
E: 33 49 [weight=2, ];
E: 34 49 [weight=1, ];
E: 35 49 [weight=2, ];
E: 36 49 [weight=1, ];
E: 37 39 [weight=1, ];
E: 37 40 [weight=1, ];
E: 37 43 [weight=2, ];
E: 37 49 [weight=3, ];
E: 38 49 [weight=4, ];
E: 39 44 [weight=1, ];
E: 39 49 [weight=5, ];
E: 40 44 [weight=3, ];
E: 40 49 [weight=9, ];
E: 41 49 [weight=3, ];
E: 42 44 [weight=1, ];
E: 42 49 [weight=3, ];
E: 43 44 [weight=1, ];
E: 43 49 [weight=2, ];
E: 44 49 [weight=3, ];
E: 45 47 [weight=1, ];
E: 45 49 [weight=1, ];
E: 46 3 [weight=1, ];
E: 46 4 [weight=1, ];
E: 46 47 [weight=1, ];
E: 46 49 [weight=1, ];
E: 47 3 [weight=1, ];
E: 47 4 [weight=1, ];
E: 47 48 [weight=1, ];
E: 48 3 [weight=1, ];
E: 48 4 [weight=1, ];
E: 48 49 [weight=1, ];
E: 49 1 [weight=2, ];
E: 49 2 [weight=1, ];
E: 49 3 [weight=10, ];
E: 49 4 [weight=24, ];
E: 50 1 [weight=1, ];
E: 50 2 [weight=5, ];
E: 50 3 [weight=5, ];
E: 50 4 [weight=16, ];
E: 50 51 [weight=4, ];
E: 51 1 [weight=1, ];
E: 51 4 [weight=3, ];
E: 52 3 [weight=2, ];
E: 52 4 [weight=2, ];
E: 52 28 [weight=1, ];
E: 52 49 [weight=6, ];
E: 52 53 [weight=3, ];
E: 52 54 [weight=1, ];
E: 53 28 [weight=1, ];
E: 53 49 [weight=4, ];
E: 53 54 [weight=1, ];
E: 54 28 [weight=1, ];
E: 54 59 [weight=1, ];
E: 55 1 [weight=1, ];
E: 55 2 [weight=18, ];
E: 55 3 [weight=94, ];
E: 55 4 [weight=32, ];
E: 55 28 [weight=45, ];
E: 55 51 [weight=13, ];
E: 55 56 [weight=17, ];
E: 55 62 [weight=6, ];
E: 56 28 [weight=1, ];
E: 56 57 [weight=1, ];
E: 57 51 [weight=1, ];
E: 57 61 [weight=1, ];
E: 57 68 [weight=1, ];
E: 58 3 [weight=2, ];
E: 58 59 [weight=2, ];
E: 59 28 [weight=1, ];
E: 59 60 [weight=1, ];
E: 60 28 [weight=1, ];
E: 60 61 [weight=1, ];
E: 60 68 [weight=1, ];
E: 61 28 [weight=2, ];
E: 61 49 [weight=10, ];
E: 61 62 [weight=1, ];
E: 61 65 [weight=1, ];
E: 61 68 [weight=1, ];
E: 62 1 [weight=4, ];
E: 62 2 [weight=3, ];
E: 62 3 [weight=1, ];
E: 62 4 [weight=8, ];
E: 62 28 [weight=4, ];
E: 62 49 [weight=11, ];
E: 63 3 [weight=3, ];
E: 63 4 [weight=2, ];
E: 63 28 [weight=1, ];
E: 63 68 [weight=1, ];
E: 63 70 [weight=2, ];
E: 63 71 [weight=1, ];
E: 64 1 [weight=1, ];
E: 64 3 [weight=1, ];
E: 64 4 [weight=3, ];
E: 64 28 [weight=4, ];
E: 64 51 [weight=1, ];
E: 64 68 [weight=1, ];
E: 65 3 [weight=1, ];
E: 65 4 [weight=2, ];
E: 65 28 [weight=3, ];
E: 65 51 [weight=1, ];
E: 65 68 [weight=1, ];
E: 66 3 [weight=8, ];
E: 66 4 [weight=22, ];
E: 66 28 [weight=2, ];
E: 66 68 [weight=1, ];
E: 67 3 [weight=1, ];
E: 67 4 [weight=3, ];
E: 67 68 [weight=1, ];
E: 68 3 [weight=1, ];
E: 68 4 [weight=2, ];
E: 69 2 [weight=1, ];
E: 69 3 [weight=6, ];
E: 69 28 [weight=6, ];
E: 70 28 [weight=3, ];
E: 70 71 [weight=1, ];
E: 70 73 [weight=2, ];
E: 71 2 [weight=1, ];
E: 71 3 [weight=1, ];
E: 71 28 [weight=2, ];
E: 71 51 [weight=1, ];
E: 71 72 [weight=2, ];
E: 71 73 [weight=4, ];
E: 72 73 [weight=5, ];
E: 74 49 [weight=4, ];
E: 74 78 [weight=1, ];
E: 75 49 [weight=4, ];
E: 75 76 [weight=1, ];
E: 75 77 [weight=1, ];
E: 75 78 [weight=2, ];
E: 75 79 [weight=1, ];
E: 76 49 [weight=4, ];
E: 76 78 [weight=1, ];
E: 76 79 [weight=1, ];
E: 77 49 [weight=4, ];
E: 77 78 [weight=1, ];
E: 77 79 [weight=1, ];
E: 78 49 [weight=4, ];
E: 78 79 [weight=1, ];
E: 79 49 [weight=5, ];
E: 79 99 [weight=2, ];
E: 79 105 [weight=1, ];
E: 80 11 [weight=1, ];
E: 80 49 [weight=19, ];
E: 81 1 [weight=5, ];
E: 81 4 [weight=10, ];
E: 81 28 [weight=6, ];
E: 81 49 [weight=5, ];
E: 81 51 [weight=2, ];
E: 81 86 [weight=2, ];
E: 81 96 [weight=1, ];
E: 82 28 [weight=3, ];
E: 82 41 [weight=1, ];
E: 82 49 [weight=31, ];
E: 83 1 [weight=2, ];
E: 83 2 [weight=3, ];
E: 83 3 [weight=9, ];
E: 83 4 [weight=4, ];
E: 83 28 [weight=30, ];
E: 84 1 [weight=2, ];
E: 84 2 [weight=3, ];
E: 84 3 [weight=17, ];
E: 84 4 [weight=10, ];
E: 84 28 [weight=35, ];
E: 84 49 [weight=1, ];
E: 85 2 [weight=1, ];
E: 85 28 [weight=5, ];
E: 85 49 [weight=2, ];
E: 85 102 [weight=1, ];
E: 86 28 [weight=2, ];
E: 86 49 [weight=3, ];
E: 86 104 [weight=1, ];
E: 87 49 [weight=1, ];
E: 87 88 [weight=1, ];
E: 88 2 [weight=1, ];
E: 88 49 [weight=1, ];
E: 89 49 [weight=5, ];
E: 89 94 [weight=1, ];
E: 90 49 [weight=4, ];
E: 90 95 [weight=1, ];
E: 91 49 [weight=3, ];
E: 91 93 [weight=1, ];
E: 92 28 [weight=1, ];
E: 92 49 [weight=3, ];
E: 92 93 [weight=1, ];
E: 93 49 [weight=4, ];
E: 93 94 [weight=1, ];
E: 94 49 [weight=9, ];
E: 94 96 [weight=1, ];
E: 95 2 [weight=1, ];
E: 95 49 [weight=9, ];
E: 95 96 [weight=1, ];
E: 96 35 [weight=1, ];
E: 96 36 [weight=1, ];
E: 96 49 [weight=6, ];
E: 97 1 [weight=1, ];
E: 97 3 [weight=2, ];
E: 97 4 [weight=5, ];
E: 97 49 [weight=4, ];
E: 97 98 [weight=2, ];
E: 97 104 [weight=2, ];
E: 98 1 [weight=1, ];
E: 98 4 [weight=2, ];
E: 98 49 [weight=5, ];
E: 98 104 [weight=1, ];
E: 99 7 [weight=1, ];
E: 99 8 [weight=1, ];
E: 99 49 [weight=8, ];
E: 100 9 [weight=1, ];
E: 100 10 [weight=1, ];
E: 100 49 [weight=8, ];
E: 101 28 [weight=1, ];
E: 101 49 [weight=9, ];
E: 101 102 [weight=1, ];
E: 102 1 [weight=2, ];
E: 102 2 [weight=1, ];
E: 102 3 [weight=5, ];
E: 102 4 [weight=8, ];
E: 102 5 [weight=1, ];
E: 102 28 [weight=2, ];
E: 102 49 [weight=9, ];
E: 103 49 [weight=5, ];
E: 103 104 [weight=1, ];
E: 104 3 [weight=6, ];
E: 104 5 [weight=1, ];
E: 104 49 [weight=9, ];
E: 105 36 [weight=2, ];
E: 105 49 [weight=5, ];
