N: 4 "of_hex_int" [body=yes, kind=cnst, prop=no, path="Basics.Nat", ];
N: 10 "of_hex_uint" [body=yes, kind=cnst, prop=no, path="Basics.Nat", ];
N: 11 "of_hex_uint_acc" [body=yes, kind=cnst, prop=no, path="Basics.Nat", ];
N: 5 "of_int" [body=yes, kind=cnst, prop=no, path="Basics.Nat", ];
N: 3 "of_num_int" [body=yes, kind=cnst, prop=no, path="Basics.Nat", ];
N: 9 "of_num_uint" [body=yes, kind=cnst, prop=no, path="Basics.Nat", ];
N: 12 "of_uint" [body=yes, kind=cnst, prop=no, path="Basics.Nat", ];
N: 13 "of_uint_acc" [body=yes, kind=cnst, prop=no, path="Basics.Nat", ];
N: 16 "tail_add" [body=yes, kind=cnst, prop=no, path="Basics.Nat", ];
N: 15 "tail_addmul" [body=yes, kind=cnst, prop=no, path="Basics.Nat", ];
N: 14 "tail_mul" [body=yes, kind=cnst, prop=no, path="Basics.Nat", ];
N: 2 "to_int" [body=yes, kind=cnst, prop=no, path="Basics.Nat", ];
N: 8 "to_little_uint" [body=yes, kind=cnst, prop=no, path="Basics.Nat", ];
N: 1 "to_num_int" [body=yes, kind=cnst, prop=no, path="Basics.Nat", ];
N: 6 "to_num_uint" [body=yes, kind=cnst, prop=no, path="Basics.Nat", ];
N: 7 "to_uint" [body=yes, kind=cnst, prop=no, path="Basics.Nat", ];
E: 1 2 [weight=1, ];
E: 2 7 [weight=1, ];
E: 3 4 [weight=1, ];
E: 3 5 [weight=1, ];
E: 4 10 [weight=1, ];
E: 5 12 [weight=1, ];
E: 6 7 [weight=1, ];
E: 7 8 [weight=1, ];
E: 9 10 [weight=1, ];
E: 9 12 [weight=1, ];
E: 10 11 [weight=1, ];
E: 11 14 [weight=16, ];
E: 12 13 [weight=1, ];
E: 13 14 [weight=10, ];
E: 14 15 [weight=1, ];
E: 15 16 [weight=1, ];
