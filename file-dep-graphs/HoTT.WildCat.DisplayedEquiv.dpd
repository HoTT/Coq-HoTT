N: 54 "Build_DCatEquiv" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 64 "DCatEquiv" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 63 "DCatIsEquiv" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 67 "DHasEquivs_ind" [body=yes, kind=cnst, prop=yes, path="DisplayedEquiv", ];
N: 66 "DHasEquivs_rec" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 68 "DHasEquivs_rect" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 65 "DHasEquivs_sind" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 7 "IsDUnivalent1Cat_ind" [body=yes, kind=cnst, prop=yes, path="DisplayedEquiv", ];
N: 6 "IsDUnivalent1Cat_rec" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 8 "IsDUnivalent1Cat_rect" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 5 "IsDUnivalent1Cat_sind" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 11 "dcat_equiv_path" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 2 "dcat_equiv_path_total" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 3 "dcat_path_equiv" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 53 "dcate_adjointify" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 60 "dcate_buildequiv" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 59 "dcate_buildequiv_fun" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 27 "dcate_epic_equiv" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 62 "dcate_fun" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 52 "dcate_inv" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 58 "dcate_inv'" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 20 "dcate_inv2" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 18 "dcate_inv_V" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 47 "dcate_inv_adjointify" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 19 "dcate_inv_compose" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 48 "dcate_inverse_retr" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 49 "dcate_inverse_sect" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 61 "dcate_isequiv" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 50 "dcate_isretr" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 56 "dcate_isretr'" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 51 "dcate_issect" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 57 "dcate_issect'" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 28 "dcate_monic_equiv" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 23 "dcate_moveL_1V" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 24 "dcate_moveL_V1" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 21 "dcate_moveR_1V" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 22 "dcate_moveR_V1" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 25 "dcate_moveR_Ve" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 26 "dcate_moveR_eM" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 55 "dcatie_adjointify" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 42 "dcatie_homotopic" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 45 "dcatie_id" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 32 "dcompose_V_hh" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 39 "dcompose_cate" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 35 "dcompose_cate_assoc" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 38 "dcompose_cate_fun" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 37 "dcompose_cate_funinv" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 34 "dcompose_cate_idl" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 33 "dcompose_cate_idr" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 41 "dcompose_catie" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 40 "dcompose_catie'" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 29 "dcompose_hV_h" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 31 "dcompose_h_Vh" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 30 "dcompose_hh_V" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 16 "demap" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 14 "demap_compose" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 13 "demap_compose'" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 15 "demap_id" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 12 "demap_inv" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 44 "did_cate" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 36 "did_cate_fun" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 17 "diemap" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 46 "hasequivs_total" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 4 "isequiv_dcat_equiv_path" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 1 "isunivalent1cat_total" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 43 "reflexive_dcate" [body=yes, kind=cnst, prop=no, path="DisplayedEquiv", ];
N: 70 "DHasEquivs" [kind=inductive, prop=no, path="DisplayedEquiv", ];
N: 10 "IsDUnivalent1Cat" [kind=inductive, prop=no, path="DisplayedEquiv", ];
N: 69 "Build_DHasEquivs" [kind=construct, prop=no, path="DisplayedEquiv", ];
N: 9 "Build_IsDUnivalent1Cat" [kind=construct, prop=no, path="DisplayedEquiv", ];
E: 1 2 [weight=4, ];
E: 1 10 [weight=2, ];
E: 1 11 [weight=1, ];
E: 1 46 [weight=6, ];
E: 1 70 [weight=2, ];
E: 2 11 [weight=1, ];
E: 2 70 [weight=2, ];
E: 3 10 [weight=2, ];
E: 3 70 [weight=2, ];
E: 4 10 [weight=2, ];
E: 4 11 [weight=1, ];
E: 4 70 [weight=2, ];
E: 5 9 [weight=2, ];
E: 5 10 [weight=4, ];
E: 5 11 [weight=2, ];
E: 5 70 [weight=2, ];
E: 6 8 [weight=1, ];
E: 6 9 [weight=1, ];
E: 6 10 [weight=3, ];
E: 6 11 [weight=1, ];
E: 6 70 [weight=2, ];
E: 7 9 [weight=2, ];
E: 7 10 [weight=4, ];
E: 7 11 [weight=2, ];
E: 7 70 [weight=2, ];
E: 8 9 [weight=2, ];
E: 8 10 [weight=4, ];
E: 8 11 [weight=2, ];
E: 8 70 [weight=2, ];
E: 9 11 [weight=1, ];
E: 9 70 [weight=1, ];
E: 10 11 [weight=1, ];
E: 10 70 [weight=1, ];
E: 11 43 [weight=1, ];
E: 11 70 [weight=2, ];
E: 12 16 [weight=4, ];
E: 12 17 [weight=1, ];
E: 12 47 [weight=1, ];
E: 12 50 [weight=2, ];
E: 12 51 [weight=2, ];
E: 12 52 [weight=39, ];
E: 12 53 [weight=1, ];
E: 12 70 [weight=4, ];
E: 13 14 [weight=1, ];
E: 13 16 [weight=14, ];
E: 13 17 [weight=4, ];
E: 13 38 [weight=1, ];
E: 13 39 [weight=6, ];
E: 13 70 [weight=4, ];
E: 14 16 [weight=1, ];
E: 14 17 [weight=2, ];
E: 14 38 [weight=1, ];
E: 14 39 [weight=8, ];
E: 14 70 [weight=4, ];
E: 15 16 [weight=1, ];
E: 15 17 [weight=2, ];
E: 15 36 [weight=2, ];
E: 15 44 [weight=13, ];
E: 15 70 [weight=4, ];
E: 16 17 [weight=1, ];
E: 16 54 [weight=1, ];
E: 16 70 [weight=4, ];
E: 17 50 [weight=1, ];
E: 17 51 [weight=1, ];
E: 17 52 [weight=15, ];
E: 17 70 [weight=4, ];
E: 18 22 [weight=1, ];
E: 18 51 [weight=1, ];
E: 18 52 [weight=4, ];
E: 18 70 [weight=2, ];
E: 19 38 [weight=1, ];
E: 19 39 [weight=5, ];
E: 19 47 [weight=1, ];
E: 19 50 [weight=2, ];
E: 19 51 [weight=2, ];
E: 19 52 [weight=74, ];
E: 19 70 [weight=2, ];
E: 20 24 [weight=1, ];
E: 20 50 [weight=1, ];
E: 20 52 [weight=6, ];
E: 20 70 [weight=2, ];
E: 21 27 [weight=1, ];
E: 21 51 [weight=1, ];
E: 21 52 [weight=3, ];
E: 21 70 [weight=2, ];
E: 22 28 [weight=1, ];
E: 22 50 [weight=1, ];
E: 22 52 [weight=3, ];
E: 22 70 [weight=2, ];
E: 23 27 [weight=1, ];
E: 23 51 [weight=1, ];
E: 23 52 [weight=4, ];
E: 23 70 [weight=2, ];
E: 24 28 [weight=1, ];
E: 24 50 [weight=1, ];
E: 24 52 [weight=4, ];
E: 24 70 [weight=2, ];
E: 25 28 [weight=1, ];
E: 25 31 [weight=1, ];
E: 25 52 [weight=3, ];
E: 25 70 [weight=2, ];
E: 26 27 [weight=1, ];
E: 26 30 [weight=1, ];
E: 26 52 [weight=5, ];
E: 26 70 [weight=2, ];
E: 27 30 [weight=2, ];
E: 27 52 [weight=5, ];
E: 27 70 [weight=2, ];
E: 28 32 [weight=2, ];
E: 28 52 [weight=5, ];
E: 28 70 [weight=2, ];
E: 29 51 [weight=1, ];
E: 29 52 [weight=6, ];
E: 29 70 [weight=2, ];
E: 30 50 [weight=1, ];
E: 30 52 [weight=6, ];
E: 30 70 [weight=2, ];
E: 31 50 [weight=1, ];
E: 31 52 [weight=6, ];
E: 31 70 [weight=2, ];
E: 32 51 [weight=1, ];
E: 32 52 [weight=6, ];
E: 32 70 [weight=2, ];
E: 33 38 [weight=1, ];
E: 33 39 [weight=3, ];
E: 33 44 [weight=5, ];
E: 33 45 [weight=2, ];
E: 33 70 [weight=2, ];
E: 34 38 [weight=1, ];
E: 34 39 [weight=3, ];
E: 34 44 [weight=5, ];
E: 34 45 [weight=2, ];
E: 34 70 [weight=2, ];
E: 35 37 [weight=2, ];
E: 35 38 [weight=2, ];
E: 35 39 [weight=21, ];
E: 35 70 [weight=2, ];
E: 36 44 [weight=1, ];
E: 36 45 [weight=1, ];
E: 36 70 [weight=2, ];
E: 37 39 [weight=2, ];
E: 37 41 [weight=1, ];
E: 37 70 [weight=2, ];
E: 38 39 [weight=1, ];
E: 38 41 [weight=1, ];
E: 38 70 [weight=2, ];
E: 39 41 [weight=1, ];
E: 39 54 [weight=1, ];
E: 39 70 [weight=2, ];
E: 40 41 [weight=1, ];
E: 40 42 [weight=1, ];
E: 40 54 [weight=2, ];
E: 40 70 [weight=2, ];
E: 41 50 [weight=2, ];
E: 41 51 [weight=2, ];
E: 41 52 [weight=60, ];
E: 41 70 [weight=2, ];
E: 42 50 [weight=1, ];
E: 42 51 [weight=1, ];
E: 42 52 [weight=13, ];
E: 42 54 [weight=14, ];
E: 42 70 [weight=2, ];
E: 43 44 [weight=1, ];
E: 43 70 [weight=2, ];
E: 44 45 [weight=1, ];
E: 44 54 [weight=1, ];
E: 44 70 [weight=2, ];
E: 45 70 [weight=2, ];
E: 46 50 [weight=1, ];
E: 46 51 [weight=1, ];
E: 46 52 [weight=7, ];
E: 46 54 [weight=2, ];
E: 46 70 [weight=2, ];
E: 47 49 [weight=1, ];
E: 47 52 [weight=1, ];
E: 47 53 [weight=2, ];
E: 47 70 [weight=2, ];
E: 48 50 [weight=1, ];
E: 48 52 [weight=14, ];
E: 48 70 [weight=2, ];
E: 49 51 [weight=1, ];
E: 49 52 [weight=14, ];
E: 49 70 [weight=2, ];
E: 50 52 [weight=3, ];
E: 50 70 [weight=2, ];
E: 51 52 [weight=3, ];
E: 51 70 [weight=2, ];
E: 52 53 [weight=1, ];
E: 52 70 [weight=2, ];
E: 53 54 [weight=1, ];
E: 53 70 [weight=2, ];
E: 54 70 [weight=2, ];
E: 55 70 [weight=2, ];
E: 56 70 [weight=2, ];
E: 57 70 [weight=2, ];
E: 58 70 [weight=2, ];
E: 59 70 [weight=2, ];
E: 60 70 [weight=2, ];
E: 61 70 [weight=2, ];
E: 62 70 [weight=2, ];
E: 63 70 [weight=2, ];
E: 64 70 [weight=2, ];
E: 65 69 [weight=2, ];
E: 65 70 [weight=4, ];
E: 66 68 [weight=1, ];
E: 66 69 [weight=1, ];
E: 66 70 [weight=3, ];
E: 67 69 [weight=2, ];
E: 67 70 [weight=4, ];
E: 68 69 [weight=2, ];
E: 68 70 [weight=4, ];
