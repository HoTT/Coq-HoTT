N: 10 "HasOChoice" [body=yes, kind=cnst, prop=no, path="Projective", ];
N: 13 "IsOProjective" [body=yes, kind=cnst, prop=no, path="Projective", ];
N: 4 "equiv_isoprojective_hasochoice" [body=yes, kind=cnst, prop=no, path="Projective", ];
N: 11 "equiv_isoprojective_surjections_split" [body=yes, kind=cnst, prop=no, path="Projective", ];
N: 1 "equiv_isprojective_ishset_AC" [body=yes, kind=cnst, prop=no, path="Projective", ];
N: 9 "hasochoice" [body=yes, kind=cnst, prop=no, path="Projective", ];
N: 6 "hasochoice_oprojective" [body=yes, kind=cnst, prop=no, path="Projective", ];
N: 8 "hasochoice_sigma" [body=yes, kind=cnst, prop=no, path="Projective", ];
N: 5 "iff_isoprojective_hasochoice" [body=yes, kind=cnst, prop=no, path="Projective", ];
N: 12 "iff_isoprojective_surjections_split" [body=yes, kind=cnst, prop=no, path="Projective", ];
N: 7 "isoprojective_ochoice" [body=yes, kind=cnst, prop=no, path="Projective", ];
N: 3 "isprojective_unit" [body=yes, kind=cnst, prop=no, path="Projective", ];
N: 2 "projective_cover_AC" [body=yes, kind=cnst, prop=no, path="Projective", ];
E: 1 2 [weight=1, ];
E: 1 4 [weight=1, ];
E: 1 10 [weight=2, ];
E: 1 13 [weight=3, ];
E: 2 4 [weight=1, ];
E: 2 10 [weight=2, ];
E: 2 13 [weight=1, ];
E: 3 7 [weight=1, ];
E: 3 10 [weight=1, ];
E: 3 13 [weight=1, ];
E: 4 5 [weight=1, ];
E: 4 10 [weight=2, ];
E: 4 13 [weight=2, ];
E: 5 6 [weight=1, ];
E: 5 7 [weight=1, ];
E: 5 10 [weight=3, ];
E: 5 13 [weight=3, ];
E: 6 10 [weight=3, ];
E: 6 12 [weight=1, ];
E: 6 13 [weight=3, ];
E: 7 10 [weight=2, ];
E: 7 13 [weight=2, ];
E: 8 10 [weight=6, ];
E: 9 10 [weight=2, ];
E: 11 12 [weight=1, ];
E: 11 13 [weight=2, ];
E: 12 13 [weight=5, ];
