N: 32 "IsEmbedding_funcofmembers" [body=yes, kind=cnst, prop=no, path="V", ];
N: 18 "V_cart_prod" [body=yes, kind=cnst, prop=no, path="V", ];
N: 53 "V_comp_nd_setext" [body=yes, kind=cnst, prop=no, path="V", ];
N: 55 "V_comp_setext" [body=yes, kind=cnst, prop=no, path="V", ];
N: 26 "V_empty" [body=yes, kind=cnst, prop=no, path="V", ];
N: 16 "V_func" [body=yes, kind=cnst, prop=no, path="V", ];
N: 1 "V_ind" [body=yes, kind=cnst, prop=no, path="V.CumulativeHierarchy", ];
N: 49 "V_ind'" [body=yes, kind=cnst, prop=no, path="V", ];
N: 48 "V_ind_hprop" [body=yes, kind=cnst, prop=no, path="V", ];
N: 17 "V_is_func" [body=yes, kind=cnst, prop=no, path="V", ];
N: 13 "V_omega" [body=yes, kind=cnst, prop=no, path="V", ];
N: 23 "V_pair" [body=yes, kind=cnst, prop=no, path="V", ];
N: 20 "V_pair_ord" [body=yes, kind=cnst, prop=no, path="V", ];
N: 54 "V_rec" [body=yes, kind=cnst, prop=no, path="V", ];
N: 50 "V_rec'" [body=yes, kind=cnst, prop=no, path="V", ];
N: 25 "V_singleton" [body=yes, kind=cnst, prop=no, path="V", ];
N: 14 "V_succ" [body=yes, kind=cnst, prop=no, path="V", ];
N: 15 "V_union" [body=yes, kind=cnst, prop=no, path="V", ];
N: 45 "bisim_aux" [body=yes, kind=cnst, prop=no, path="V", ];
N: 44 "bisimulation" [body=yes, kind=cnst, prop=no, path="V", ];
N: 42 "bisimulation_equiv_id" [body=yes, kind=cnst, prop=no, path="V", ];
N: 56 "bitotal" [body=yes, kind=cnst, prop=no, path="V", ];
N: 39 "eq_img_untrunc" [body=yes, kind=cnst, prop=no, path="V", ];
N: 52 "equal_img" [body=yes, kind=cnst, prop=no, path="V", ];
N: 30 "extensionality" [body=yes, kind=cnst, prop=no, path="V", ];
N: 34 "func_of_members" [body=yes, kind=cnst, prop=no, path="V", ];
N: 8 "function" [body=yes, kind=cnst, prop=no, path="V", ];
N: 10 "infinity" [body=yes, kind=cnst, prop=no, path="V", ];
N: 28 "irreflexive_mem" [body=yes, kind=cnst, prop=no, path="V", ];
N: 33 "is_hset_typeofmembers" [body=yes, kind=cnst, prop=no, path="V", ];
N: 31 "is_valid_presentation" [body=yes, kind=cnst, prop=no, path="V", ];
N: 24 "isequiv_ap_V_singleton" [body=yes, kind=cnst, prop=no, path="V", ];
N: 2 "ishset_V" [body=no, kind=cnst, prop=no, path="V.CumulativeHierarchy", ];
N: 41 "ker_bisim" [body=yes, kind=cnst, prop=no, path="V", ];
N: 40 "ker_bisim_is_ker" [body=yes, kind=cnst, prop=no, path="V", ];
N: 47 "mem" [body=yes, kind=cnst, prop=no, path="V", ];
N: 29 "mem_induction" [body=yes, kind=cnst, prop=no, path="V", ];
N: 36 "monic_set_present" [body=yes, kind=cnst, prop=no, path="V", ];
N: 37 "monic_set_present_uniqueness" [body=yes, kind=cnst, prop=no, path="V", ];
N: 38 "mu_eq_mu'" [body=yes, kind=cnst, prop=no, path="V", ];
N: 12 "not_mem_Vempty" [body=yes, kind=cnst, prop=no, path="V", ];
N: 21 "pair_eq_singleton" [body=yes, kind=cnst, prop=no, path="V", ];
N: 11 "pairing" [body=yes, kind=cnst, prop=no, path="V", ];
N: 27 "path_V_eqimg" [body=yes, kind=cnst, prop=no, path="V", ];
N: 22 "path_pair" [body=yes, kind=cnst, prop=no, path="V", ];
N: 19 "path_pair_ord" [body=yes, kind=cnst, prop=no, path="V", ];
N: 43 "reflexive_bisimulation" [body=yes, kind=cnst, prop=no, path="V", ];
N: 7 "replacement" [body=yes, kind=cnst, prop=no, path="V", ];
N: 6 "separation" [body=yes, kind=cnst, prop=no, path="V", ];
N: 3 "setext" [body=no, kind=cnst, prop=no, path="V.CumulativeHierarchy", ];
N: 51 "setext'" [body=yes, kind=cnst, prop=no, path="V", ];
N: 46 "subset" [body=yes, kind=cnst, prop=no, path="V", ];
N: 35 "type_of_members" [body=yes, kind=cnst, prop=no, path="V", ];
N: 9 "union" [body=yes, kind=cnst, prop=no, path="V", ];
N: 5 "V" [kind=inductive, prop=no, path="V.CumulativeHierarchy", ];
N: 4 "set" [kind=construct, prop=no, path="V.CumulativeHierarchy", ];
E: 1 3 [weight=5, ];
E: 1 4 [weight=18, ];
E: 1 5 [weight=50, ];
E: 1 56 [weight=5, ];
E: 2 5 [weight=1, ];
E: 3 4 [weight=2, ];
E: 3 5 [weight=4, ];
E: 3 56 [weight=1, ];
E: 6 4 [weight=12, ];
E: 6 5 [weight=41, ];
E: 6 47 [weight=21, ];
E: 6 48 [weight=1, ];
E: 7 4 [weight=15, ];
E: 7 5 [weight=82, ];
E: 7 47 [weight=24, ];
E: 7 48 [weight=1, ];
E: 8 2 [weight=3, ];
E: 8 4 [weight=36, ];
E: 8 5 [weight=205, ];
E: 8 16 [weight=5, ];
E: 8 17 [weight=6, ];
E: 8 18 [weight=6, ];
E: 8 19 [weight=2, ];
E: 8 20 [weight=145, ];
E: 8 30 [weight=1, ];
E: 8 31 [weight=2, ];
E: 8 32 [weight=2, ];
E: 8 34 [weight=183, ];
E: 8 35 [weight=192, ];
E: 8 46 [weight=11, ];
E: 8 47 [weight=160, ];
E: 9 4 [weight=8, ];
E: 9 5 [weight=63, ];
E: 9 15 [weight=7, ];
E: 9 31 [weight=4, ];
E: 9 34 [weight=90, ];
E: 9 35 [weight=82, ];
E: 9 47 [weight=40, ];
E: 10 5 [weight=31, ];
E: 10 13 [weight=6, ];
E: 10 14 [weight=15, ];
E: 10 26 [weight=13, ];
E: 10 47 [weight=6, ];
E: 11 5 [weight=60, ];
E: 11 23 [weight=3, ];
E: 11 47 [weight=5, ];
E: 12 5 [weight=8, ];
E: 12 26 [weight=3, ];
E: 12 47 [weight=3, ];
E: 13 4 [weight=1, ];
E: 13 5 [weight=3, ];
E: 13 14 [weight=1, ];
E: 13 26 [weight=1, ];
E: 14 2 [weight=1, ];
E: 14 4 [weight=32, ];
E: 14 5 [weight=90, ];
E: 14 50 [weight=1, ];
E: 14 51 [weight=3, ];
E: 14 52 [weight=4, ];
E: 15 4 [weight=1, ];
E: 15 5 [weight=3, ];
E: 15 34 [weight=4, ];
E: 15 35 [weight=6, ];
E: 16 4 [weight=2, ];
E: 16 5 [weight=5, ];
E: 16 20 [weight=1, ];
E: 16 34 [weight=2, ];
E: 16 35 [weight=6, ];
E: 17 5 [weight=13, ];
E: 17 18 [weight=1, ];
E: 17 20 [weight=3, ];
E: 17 46 [weight=1, ];
E: 17 47 [weight=5, ];
E: 18 4 [weight=1, ];
E: 18 5 [weight=5, ];
E: 18 20 [weight=1, ];
E: 18 34 [weight=2, ];
E: 18 35 [weight=4, ];
E: 19 2 [weight=2, ];
E: 19 5 [weight=144, ];
E: 19 20 [weight=24, ];
E: 19 21 [weight=6, ];
E: 19 22 [weight=2, ];
E: 19 23 [weight=35, ];
E: 19 24 [weight=1, ];
E: 19 25 [weight=48, ];
E: 19 27 [weight=1, ];
E: 19 30 [weight=2, ];
E: 19 46 [weight=2, ];
E: 19 47 [weight=3, ];
E: 20 5 [weight=5, ];
E: 20 23 [weight=2, ];
E: 20 25 [weight=1, ];
E: 21 2 [weight=4, ];
E: 21 5 [weight=99, ];
E: 21 23 [weight=4, ];
E: 21 25 [weight=4, ];
E: 21 27 [weight=1, ];
E: 21 51 [weight=1, ];
E: 22 5 [weight=45, ];
E: 22 23 [weight=2, ];
E: 22 51 [weight=1, ];
E: 23 4 [weight=1, ];
E: 23 5 [weight=6, ];
E: 24 2 [weight=15, ];
E: 24 5 [weight=409, ];
E: 24 25 [weight=78, ];
E: 24 27 [weight=10, ];
E: 24 52 [weight=20, ];
E: 25 4 [weight=1, ];
E: 25 5 [weight=4, ];
E: 26 4 [weight=1, ];
E: 26 5 [weight=2, ];
E: 27 4 [weight=16, ];
E: 27 5 [weight=27, ];
E: 27 30 [weight=2, ];
E: 27 46 [weight=2, ];
E: 27 47 [weight=2, ];
E: 27 52 [weight=1, ];
E: 28 5 [weight=16, ];
E: 28 29 [weight=1, ];
E: 28 47 [weight=12, ];
E: 29 4 [weight=2, ];
E: 29 5 [weight=16, ];
E: 29 47 [weight=3, ];
E: 29 48 [weight=1, ];
E: 30 2 [weight=2, ];
E: 30 4 [weight=61, ];
E: 30 5 [weight=55, ];
E: 30 46 [weight=48, ];
E: 30 47 [weight=4, ];
E: 30 48 [weight=2, ];
E: 30 51 [weight=1, ];
E: 31 4 [weight=1, ];
E: 31 5 [weight=3, ];
E: 31 34 [weight=1, ];
E: 31 35 [weight=1, ];
E: 31 36 [weight=1, ];
E: 32 5 [weight=3, ];
E: 32 34 [weight=1, ];
E: 32 35 [weight=1, ];
E: 32 36 [weight=1, ];
E: 33 5 [weight=2, ];
E: 33 35 [weight=1, ];
E: 33 36 [weight=1, ];
E: 34 5 [weight=4, ];
E: 34 35 [weight=2, ];
E: 34 36 [weight=1, ];
E: 35 5 [weight=2, ];
E: 35 36 [weight=1, ];
E: 36 2 [weight=1, ];
E: 36 4 [weight=18, ];
E: 36 5 [weight=88, ];
E: 36 37 [weight=1, ];
E: 36 40 [weight=1, ];
E: 36 41 [weight=1, ];
E: 36 48 [weight=1, ];
E: 36 51 [weight=1, ];
E: 37 2 [weight=1, ];
E: 37 4 [weight=90, ];
E: 37 5 [weight=338, ];
E: 37 38 [weight=1, ];
E: 37 39 [weight=6, ];
E: 38 4 [weight=4, ];
E: 38 5 [weight=37, ];
E: 38 39 [weight=29, ];
E: 39 4 [weight=14, ];
E: 39 5 [weight=34, ];
E: 39 47 [weight=2, ];
E: 40 5 [weight=3, ];
E: 40 41 [weight=1, ];
E: 40 42 [weight=1, ];
E: 41 5 [weight=2, ];
E: 41 44 [weight=1, ];
E: 42 1 [weight=8, ];
E: 42 2 [weight=3, ];
E: 42 3 [weight=16, ];
E: 42 4 [weight=57, ];
E: 42 5 [weight=540, ];
E: 42 43 [weight=1, ];
E: 42 44 [weight=12, ];
E: 42 45 [weight=120, ];
E: 42 48 [weight=10, ];
E: 42 51 [weight=1, ];
E: 42 56 [weight=8, ];
E: 43 1 [weight=6, ];
E: 43 3 [weight=12, ];
E: 43 4 [weight=36, ];
E: 43 5 [weight=386, ];
E: 43 44 [weight=4, ];
E: 43 45 [weight=90, ];
E: 43 48 [weight=7, ];
E: 43 56 [weight=6, ];
E: 44 4 [weight=8, ];
E: 44 5 [weight=34, ];
E: 44 45 [weight=17, ];
E: 44 48 [weight=1, ];
E: 44 50 [weight=1, ];
E: 44 52 [weight=2, ];
E: 45 5 [weight=32, ];
E: 45 50 [weight=1, ];
E: 45 52 [weight=2, ];
E: 46 5 [weight=8, ];
E: 46 47 [weight=7, ];
E: 47 5 [weight=46, ];
E: 47 50 [weight=1, ];
E: 47 52 [weight=4, ];
E: 48 1 [weight=1, ];
E: 48 3 [weight=1, ];
E: 48 4 [weight=6, ];
E: 48 5 [weight=10, ];
E: 48 56 [weight=1, ];
E: 49 1 [weight=1, ];
E: 49 2 [weight=1, ];
E: 49 3 [weight=3, ];
E: 49 4 [weight=24, ];
E: 49 5 [weight=101, ];
E: 49 51 [weight=5, ];
E: 49 52 [weight=3, ];
E: 49 56 [weight=1, ];
E: 50 5 [weight=18, ];
E: 50 52 [weight=4, ];
E: 50 54 [weight=1, ];
E: 50 56 [weight=1, ];
E: 51 2 [weight=1, ];
E: 51 3 [weight=1, ];
E: 51 4 [weight=2, ];
E: 51 5 [weight=11, ];
E: 51 52 [weight=2, ];
E: 53 3 [weight=2, ];
E: 53 4 [weight=10, ];
E: 53 5 [weight=18, ];
E: 53 54 [weight=10, ];
E: 53 56 [weight=4, ];
E: 54 1 [weight=1, ];
E: 54 3 [weight=2, ];
E: 54 4 [weight=4, ];
E: 54 5 [weight=19, ];
E: 54 56 [weight=3, ];
E: 55 1 [weight=10, ];
E: 55 3 [weight=7, ];
E: 55 4 [weight=28, ];
E: 55 5 [weight=36, ];
E: 55 56 [weight=4, ];
