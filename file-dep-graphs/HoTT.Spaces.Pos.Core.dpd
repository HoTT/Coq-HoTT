N: 59 "Pos_ind" [body=yes, kind=cnst, prop=yes, path="Core", ];
N: 31 "Pos_mask_ind" [body=yes, kind=cnst, prop=yes, path="Core", ];
N: 30 "Pos_mask_rec" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 32 "Pos_mask_rect" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 29 "Pos_mask_sind" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 58 "Pos_rec" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 60 "Pos_rect" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 57 "Pos_sind" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 42 "decpaths_pos" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 41 "ishset_pos" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 12 "nat_of_pos" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 14 "nat_pos_size" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 40 "pos_add" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 39 "pos_add_carry" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 16 "pos_div2" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 15 "pos_div2_up" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 20 "pos_iter" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 19 "pos_iter_op" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 27 "pos_mask_double" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 26 "pos_mask_double_pred" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 25 "pos_mask_pred" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 24 "pos_mask_sub" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 23 "pos_mask_sub_carry" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 28 "pos_mask_succ_double" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 21 "pos_mul" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 7 "pos_of_decimal_int" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 11 "pos_of_nat" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 6 "pos_of_number_uint" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 10 "pos_of_succ_nat" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 8 "pos_of_uint" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 9 "pos_of_uint_acc" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 55 "pos_peano_ind" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 54 "pos_peano_ind_beta_1" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 53 "pos_peano_ind_beta_pos_succ" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 52 "pos_peano_rec" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 51 "pos_peano_rec_beta_pos_succ" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 18 "pos_pow" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 37 "pos_pred" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 38 "pos_pred_double" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 13 "pos_size" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 17 "pos_square" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 22 "pos_sub" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 56 "pos_succ" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 3 "pos_to_decimal_int" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 5 "pos_to_little_uint" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 1 "pos_to_nat" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 2 "pos_to_number_uint" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 4 "pos_to_uint" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 50 "x0_inj" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 46 "x0_neq_x1" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 48 "x0_neq_xH" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 49 "x1_inj" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 43 "x1_neq_x0" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 47 "x1_neq_xH" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 45 "xH_neq_x0" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 44 "xH_neq_x1" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 64 "Pos" [kind=inductive, prop=no, path="Core", ];
N: 36 "Pos_mask" [kind=inductive, prop=no, path="Core", ];
N: 63 "xH" [kind=construct, prop=no, path="Core", ];
N: 35 "IsNul" [kind=construct, prop=no, path="Core", ];
N: 62 "x0" [kind=construct, prop=no, path="Core", ];
N: 34 "IsPos" [kind=construct, prop=no, path="Core", ];
N: 61 "x1" [kind=construct, prop=no, path="Core", ];
N: 33 "IsNeg" [kind=construct, prop=no, path="Core", ];
E: 1 58 [weight=1, ];
E: 1 64 [weight=5, ];
E: 2 4 [weight=1, ];
E: 2 64 [weight=2, ];
E: 3 4 [weight=1, ];
E: 3 64 [weight=2, ];
E: 4 5 [weight=1, ];
E: 4 64 [weight=2, ];
E: 5 64 [weight=4, ];
E: 6 7 [weight=1, ];
E: 6 64 [weight=3, ];
E: 7 8 [weight=1, ];
E: 7 64 [weight=3, ];
E: 8 9 [weight=9, ];
E: 8 61 [weight=6, ];
E: 8 62 [weight=10, ];
E: 8 63 [weight=9, ];
E: 8 64 [weight=13, ];
E: 9 21 [weight=10, ];
E: 9 40 [weight=9, ];
E: 9 61 [weight=16, ];
E: 9 62 [weight=30, ];
E: 9 63 [weight=19, ];
E: 9 64 [weight=6, ];
E: 10 56 [weight=1, ];
E: 10 63 [weight=1, ];
E: 10 64 [weight=3, ];
E: 11 56 [weight=1, ];
E: 11 63 [weight=2, ];
E: 11 64 [weight=4, ];
E: 12 20 [weight=1, ];
E: 12 64 [weight=2, ];
E: 13 56 [weight=2, ];
E: 13 63 [weight=1, ];
E: 13 64 [weight=7, ];
E: 14 64 [weight=4, ];
E: 15 56 [weight=1, ];
E: 15 63 [weight=1, ];
E: 15 64 [weight=5, ];
E: 16 63 [weight=1, ];
E: 16 64 [weight=5, ];
E: 17 40 [weight=1, ];
E: 17 61 [weight=1, ];
E: 17 62 [weight=3, ];
E: 17 63 [weight=1, ];
E: 17 64 [weight=7, ];
E: 18 20 [weight=1, ];
E: 18 21 [weight=1, ];
E: 18 63 [weight=1, ];
E: 18 64 [weight=5, ];
E: 19 64 [weight=4, ];
E: 20 52 [weight=1, ];
E: 20 64 [weight=2, ];
E: 21 40 [weight=1, ];
E: 21 62 [weight=2, ];
E: 21 64 [weight=10, ];
E: 22 24 [weight=1, ];
E: 22 36 [weight=1, ];
E: 22 63 [weight=2, ];
E: 22 64 [weight=6, ];
E: 23 26 [weight=1, ];
E: 23 27 [weight=4, ];
E: 23 28 [weight=4, ];
E: 23 33 [weight=3, ];
E: 23 34 [weight=3, ];
E: 23 35 [weight=1, ];
E: 23 36 [weight=10, ];
E: 23 38 [weight=2, ];
E: 23 62 [weight=1, ];
E: 23 64 [weight=17, ];
E: 24 26 [weight=1, ];
E: 24 27 [weight=4, ];
E: 24 28 [weight=4, ];
E: 24 33 [weight=3, ];
E: 24 34 [weight=3, ];
E: 24 35 [weight=1, ];
E: 24 36 [weight=10, ];
E: 24 38 [weight=2, ];
E: 24 62 [weight=1, ];
E: 24 64 [weight=17, ];
E: 25 33 [weight=2, ];
E: 25 34 [weight=2, ];
E: 25 35 [weight=1, ];
E: 25 36 [weight=6, ];
E: 25 37 [weight=2, ];
E: 25 64 [weight=1, ];
E: 26 34 [weight=2, ];
E: 26 35 [weight=1, ];
E: 26 36 [weight=2, ];
E: 26 38 [weight=1, ];
E: 26 62 [weight=3, ];
E: 26 64 [weight=3, ];
E: 27 33 [weight=1, ];
E: 27 34 [weight=1, ];
E: 27 35 [weight=1, ];
E: 27 36 [weight=5, ];
E: 27 62 [weight=1, ];
E: 28 33 [weight=1, ];
E: 28 34 [weight=2, ];
E: 28 36 [weight=5, ];
E: 28 61 [weight=1, ];
E: 28 63 [weight=1, ];
E: 29 33 [weight=2, ];
E: 29 34 [weight=2, ];
E: 29 35 [weight=2, ];
E: 29 36 [weight=5, ];
E: 29 64 [weight=2, ];
E: 30 32 [weight=1, ];
E: 30 33 [weight=1, ];
E: 30 34 [weight=1, ];
E: 30 35 [weight=1, ];
E: 30 36 [weight=3, ];
E: 30 64 [weight=1, ];
E: 31 33 [weight=2, ];
E: 31 34 [weight=2, ];
E: 31 35 [weight=2, ];
E: 31 36 [weight=5, ];
E: 31 64 [weight=2, ];
E: 32 33 [weight=2, ];
E: 32 34 [weight=2, ];
E: 32 35 [weight=2, ];
E: 32 36 [weight=5, ];
E: 32 64 [weight=2, ];
E: 33 64 [weight=1, ];
E: 34 64 [weight=1, ];
E: 35 64 [weight=1, ];
E: 36 64 [weight=1, ];
E: 37 38 [weight=1, ];
E: 37 62 [weight=1, ];
E: 37 63 [weight=1, ];
E: 37 64 [weight=5, ];
E: 38 61 [weight=2, ];
E: 38 62 [weight=1, ];
E: 38 63 [weight=1, ];
E: 38 64 [weight=7, ];
E: 39 56 [weight=6, ];
E: 39 61 [weight=9, ];
E: 39 62 [weight=9, ];
E: 39 63 [weight=2, ];
E: 39 64 [weight=29, ];
E: 40 56 [weight=6, ];
E: 40 61 [weight=9, ];
E: 40 62 [weight=9, ];
E: 40 63 [weight=2, ];
E: 40 64 [weight=29, ];
E: 41 42 [weight=1, ];
E: 41 64 [weight=3, ];
E: 42 43 [weight=1, ];
E: 42 44 [weight=1, ];
E: 42 45 [weight=1, ];
E: 42 46 [weight=1, ];
E: 42 47 [weight=1, ];
E: 42 48 [weight=1, ];
E: 42 49 [weight=1, ];
E: 42 50 [weight=1, ];
E: 42 58 [weight=4, ];
E: 42 61 [weight=26, ];
E: 42 62 [weight=26, ];
E: 42 63 [weight=16, ];
E: 42 64 [weight=78, ];
E: 43 46 [weight=1, ];
E: 43 61 [weight=6, ];
E: 43 62 [weight=6, ];
E: 43 64 [weight=12, ];
E: 44 47 [weight=1, ];
E: 44 61 [weight=6, ];
E: 44 63 [weight=6, ];
E: 44 64 [weight=10, ];
E: 45 48 [weight=1, ];
E: 45 62 [weight=6, ];
E: 45 63 [weight=6, ];
E: 45 64 [weight=10, ];
E: 46 61 [weight=3, ];
E: 46 62 [weight=3, ];
E: 46 64 [weight=11, ];
E: 47 61 [weight=3, ];
E: 47 63 [weight=3, ];
E: 47 64 [weight=9, ];
E: 48 62 [weight=3, ];
E: 48 63 [weight=3, ];
E: 48 64 [weight=9, ];
E: 49 61 [weight=6, ];
E: 49 64 [weight=13, ];
E: 50 62 [weight=6, ];
E: 50 64 [weight=13, ];
E: 51 52 [weight=2, ];
E: 51 53 [weight=1, ];
E: 51 56 [weight=1, ];
E: 51 64 [weight=5, ];
E: 52 55 [weight=1, ];
E: 52 64 [weight=3, ];
E: 53 55 [weight=10, ];
E: 53 56 [weight=19, ];
E: 53 60 [weight=1, ];
E: 53 62 [weight=7, ];
E: 53 63 [weight=12, ];
E: 53 64 [weight=23, ];
E: 54 55 [weight=2, ];
E: 54 56 [weight=2, ];
E: 54 63 [weight=6, ];
E: 54 64 [weight=4, ];
E: 55 56 [weight=4, ];
E: 55 62 [weight=6, ];
E: 55 63 [weight=4, ];
E: 55 64 [weight=14, ];
E: 56 61 [weight=1, ];
E: 56 62 [weight=2, ];
E: 56 63 [weight=1, ];
E: 56 64 [weight=7, ];
E: 57 61 [weight=2, ];
E: 57 62 [weight=2, ];
E: 57 63 [weight=2, ];
E: 57 64 [weight=10, ];
E: 58 60 [weight=1, ];
E: 58 61 [weight=1, ];
E: 58 62 [weight=1, ];
E: 58 63 [weight=1, ];
E: 58 64 [weight=5, ];
E: 59 61 [weight=2, ];
E: 59 62 [weight=2, ];
E: 59 63 [weight=2, ];
E: 59 64 [weight=10, ];
E: 60 61 [weight=2, ];
E: 60 62 [weight=2, ];
E: 60 63 [weight=2, ];
E: 60 64 [weight=10, ];
