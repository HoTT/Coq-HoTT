# QUICK INSTALLATION INSTRUCTIONS

1. Install a custom Coq from https://github.com/HoTT/coq, the `stable`
   branch. This is a fork of the trunk and is compatible with standard
   Coq 8.4 trunk, except that it supports the the homotopy theory
   interpretation. Because our Coq fork changes frequently, HoTT may
   fail with the `master` branch. Thus, unless you know what you are
   doing, you should use the `stable` branch:

       git clone https://github.com/HoTT/coq.git
       git checkout stable

   Compile Coq as usual. One possibility is to compile it with

       ./configure -local
       make coqlight

   This will compile Coq in place, so you can run it straight from the
   source directory. It will also skip compilation of some libraries
   that we do not use anyhow.

2. Get the HoTT library at https://github.com/HoTT/HoTT.git. Go to the
   root of the HoTT created directory.

3. If you installed custom Coq so that it is found in the `PATH`, run

       ./autogen.sh
       ./configure
       make

   If you installed custom Coq in a secret place, tell ./configure
   where to find it as follows:

       ./autogen.sh
       ./configure COQBIN=<absolute-directory-containing-coq-executables>
       make

4. You can now use the HoTT library in place by running ./hoqtop and
   ./hoqc. You can also use ./hoqide which is the version of coqide
   running the hoqtop toplevel if you have compiled it successfully.

5. The library can be loaded with `Require Import HoTT.`

6. You can install the library globally with `make install`, although
   this has not been thoroughly tested.

7. To use the emacs tags facility with the *.v files here, run the command

   	make TAGS

   (The emacs command `M-x find-tag`, bound to `M-.` , will take you to
   a definition or theorem, the default name for which is located under
   your cursor. Read the help on that emacs command with `C-h k M-.` ,
   and learn the other facilities provided, such as the use of `M-*` to
   get back where you were, or the use of `M-x tags-search` to search
   throughout the code for locations matching a given regular
   expression.)

# LONG INSTALLATION INSTRUCTIONS

## PREREQUISITES

The HoTT library requires a custom version of Coq which supports the the
command-line option `-indices-matter`, universe polymorphism and private
types. The first one changes the interpretation of equality to one that
conforms to the homotopy-theoretic interpretation, the second one is
needed to avoid certain universe inconsistency errors (which are not
really there but Coq 8.4 cannot see that), and the third one allows us
to implement higher-inductive types, sort of.

At present only our fork of the Coq trunk supports these options, but we
hope to get them into the official Coq soon. Unfortunately for you
that means you will have to compile a version of Coq, available at

   https://github.com/HoTT/coq

If you have never compiled Coq you may prefer to ask a friend for
help. If you feel brave you should try doing it yourself:

1. Obtain the custom Coq fork. If you have git clone the fork with

       git clone https://github.com/HoTT/coq.git
       git checkout stable

   If you do not have git, you may still download the files as an
   archive file at https://github.com/HoTT/coq/archive/stable.zip (but
   it is better for you in the long run to learn git).

2. Compile Coq, as explained in the INSTALL.txt file of Coq
   distribution. You will need some prerequisites for compilation, such
   as OCaml 3.11.2 or later.

   If you do not want the custom Coq to override one that you already
   have installed, configure Coq with either `./configure -local` so
   that it will work in-place, or use

   `./configure -prefix <dir>`, as explained by `./configure -help`.


## INSTALLATION OF HoTT

Once you have installed the correct version of Coq, as explained in
PREREQUISITES, you proceed as follows. Clone the HoTT repository with

   git clone https://github.com/HoTT/HoTT.git

Even better, if you would like to contribute to HoTT, first fork the
repository on github and then use your own fork. This way you will be
able to make pull requests.

If you do not want to deal with git at all, you may download an
archive of HoTT at https://github.com/HoTT/HoTT/archive/master.zip and
unpack that. We do not recommend this option because the HoTT library
is under heavy development and you want to be able to easily track
changes.  Additionally, downloading the archive requires a working
version of autoreconf.

Next you should configure the HoTT library:

1. If you installed the custom Coq as your default version of Coq,
   which means that it it can be fond in PATH, run

       ./autogen.sh
       ./configure

   in the HoTT directory.

2. If you installed the custom Coq somewhere special or configured it
   with `-local`, you should tell ./configure where to find the custom
   Coq:

       ./autogen.sh
       ./configure COQBIN=<directory-containing-coq-executables>

   where you should specify the *absolute* path name (starting with /)
   of the directory which contains `coqtop`, `coqc`, etc.

To compile the HoTT library type

    make

Because it is a bit tricky to run Coq with a custom standard library,
we provided scripts `hoqtop` and `hoqc` that do this for you, so you
can run

    ./hoqtop

directly from the HoTT directory to start using the library. Load it
with

   Require Import HoTT.

There is also `hoqc` for compiling files. You may prefer to install
`hoqtop`, `hoqc` and the library files globally, in which case you
type

    sudo make install

By default the files will be installed in `/usr/local/bin` and
`/usr/local/share/hott`.  You can change the location by using
standard `configure` parameters when you run it.  For example

    ./configure --bindir=$HOME/bin --datadir-$HOME/stuff

will install `hoqtop` and `hoqc` in the `bin` subdirectory of your
home directory and the HoTT library in `stuff/hott` subdirectory of
your home directory.

If you are using ProofGeneral (PG), do not forget to change the name
of the Coq program called by PG. For instance you can edit the name of
the executable called by PG by typing 'M-x customize-variable', then
'proof-prog-name' which displays a customization utility. An other
option is to type 'M-x customize-variable', then
'proof-prog-name-ask', to click on the 'Toogle' button in front of
Proof Prog Name Ask and to save this for future sessions. This will
prompt PG to ask you for the name of the coq toplevel to be used each
time you start evaluating a file.
